\documentclass[oneside, article]{memoir}
\input{../packages}
\input{../packagesMemoir}
\input{../macros}


%opening
\title{Programming and programming languages}
\author{vishvAs vAsuki}

\begin{document}
\maketitle
\tableofcontents

\part{Introduction}
\chapter{Research themes}
\section{Programming language design}
How would you program a program to solve some problem in a very simple way? Make it as simple as possible for the programmer to specify his intention without ambiguity; then translate to the computer.

\chapter{Language Design concepts}
Programming is data processing.

For details about threads etc.., see software systems ref.

\section{Syntax}
\subsection{Literals}
All literals, apart from comments, in a program are of the following sort: keywords; identifiers (names of variables); operators. Literals are separated using delimiters and by using rules which specify the allowed structure of the literal.

\subsection{Identifiers}
\subsubsection{Overloading}
A language may allow methods/ operators with similar names, but different signature. 

\subsubsection{Scope}
Namespace/ scope of variables and functions.

\subsection{Expression evaluation}
\subsubsection{Lazy vs eager evaluation}
In lazy eval: length([2+1, 3*2, 1/0, 5-4]) returns 4 without even bothering to evaluate the values in the array. This difference in evaluation becomes important when the computations involved are costly: eg: function calls.

\subsection{Syntactic sugar}
Some languages, for the convenience of the programmer, define shorter ways of writing various frequently used expression types.

\subsubsection{Macros}
Sometimes, a user may add to syntactic sugar by the definition of 'macros' or expressions which are evaluated before the program is even parsed by the compiler.

\subsection{Regular expressions}
The basic class of regular expressions (described in the boolean functions survey) is expanded here, for the purpose of specifying patterns to find in a given string (possibly for replacement).

\subsubsection{Quantification}
Besides *, the following are used to produce sets based on self-concatenation: 

+ (1 to $\infty$) and (0 to $\infty$) times respectively.

? denotes repetition 0 or 1 times.

\{k1, k2\} represents union of k1 and k2 repetitions.

\subsubsection{Character classes}
[a,b,c..] corresponds to (a|b|c).

Character classes may be defined by exclusion of characters from the alphabet, as in [\^chars].

Syntactic sugar like [a-z] is used to specify a series of characters (exploiting a [ASCII/ unicode?] sequence defined over the alphabet).

Other character class symbols include: . which stands for selecting any symbol in the alphabet, \verb'\w' which may stand for a whitespace etc..

\href{http://en.wikipedia.org/wiki/Regular_expression}{wiki} lists various ASCII, POSIX and Perl character classes.

\subsubsection{Match position specifiers}
\^ at the beginning of an expression specifies that a match should be found at the beginning of the given string or at the beginning of a line.

\$ at the end of the expression specifies that a match should be found at the end of a string, or at the end of a line.

\subsubsection{Subpatterns}
When a pattern is found, one may select subpatterns (specified by groupings): for example to use in creating the replacement string. They are then referred to using 'pattern variables' \verb'\1, \2' etc..

\paragraph{In parsing}
Some languages use this to provide parsing facility: Strings matching subpatterns identified may be assigned to various variables for further processing.

\subsubsection{Escaped characters}
Characters which are a part of the alphabet, but are also a part of the regular expression syntax specification can be included by 'escaping' them with a $\backslash$. Eg: \verb'\+, \('.

\subsubsection{Ambiguity in matching}
In general, in a given string, functions return the first match for the regular expression first. Yet, several substrings may match a pattern and start at the same point in the given string.

By convention, * is a greedy quantifier - it returns the longest string match. To specify that one wants a minimal match (lazy quantification), one uses *? instead.

\section{Abstraction from hardware}
\subsection{View of memory}
If in writing code, one thinks in terms of instructions and data which can be understood by a processor (eg: bytes in the main memory, registers, hardware IO signals), one is working with a low level language.

High level languages allow the programmer to think of memory locations and data more abstractly/ declaratively by starting with assumptions that there exist memory locations with certain properties which will be bound to variables used by the programmer by the compiler with the OS's help.

Mixed level languages allow a combination of both these paradigms.

\subsection{Portability}
Programs written in high level language are more portable across computers with different architectures and abilities due to the existence of compilers or interpreters or virtual machines implemented on various platforms which suitably translate a high level program to something understandable to the processor.

\subsection{Programming discipline}
High level languages often try to enable/ enforce some programming discipline (eg: by enforcing OOP paradigm, functional programming, variable scoping etc..), provide more concise commands for frequent operations, perhaps using 'syntactic sugar'; though internally they may be forced to use programming paradigms different from the programming interface provided to the programmer.

\subsection{Type system}
\subsubsection{Implementing abstract data-types}
While programming, rather than think of data in terms of bytes, one can consider and manipulate data (collection of data) at a more abstract level. One can define different generic operations and views on a set of bytes depending on the type of data stored therein.

Examples of data-types may be Integers, Floating point numbers or even arbitrary user-defined classes. A very basic datatype offered by high-level languages is the Array/ sequential storage.

\subsubsection{Static vs dynamic}
In static type checking, data types are associated with variables, and these are checked at compile time to ensure that assignments do not violate this binding. So, the binding of a type to a varible happens at compile time, rather than run time. This enables us to catch errors and prove more properties about a program's correctness before it is compiled and run. It also enables safer refactoring of code (changing type to a subtype etc..).

In case of dynamic typing, types are associated with values rather than variables. THis allows the programmer more flexibility in his use of variables.

\subsubsection{Strong vs weak}
Can the type of data pointed to by a variable symbol change within its scope?


\section{Procedures}
Code is often organized into different procedures, which may be invoked under different contexts with different arguments.

\subsection{Mathematical functions}
A procedure can change state (has a side-effect) and maybe return a value, doesn't naturally correspond to mathematical function which cannot do this. So a function, which cannot have side-effects, can be viewed as a special type of procedure.

C is a procedural programming language which is not structured.

\subsection{Passing arguments to procedures}
Variables can be passed by reference, or by value. In the former case, an address to the data can be considered as being passed; so a modification to the data will be visible after the function returns. In the latter case, this is not true.

\subsection{Operators}
Operators are special functions, often with special syntax. They sometimes implement logic  which is so finely grained that it is executed in a lower level programming/ machine language. 

\section{Imperative vs declarative programming}
\subsection{Imperative programming}
Views computation in terms of altering state.

\subsubsection{Structured programming}
In this programming paradigm, state changes are restricted locally. This helps organize code and state information. Structured programming code is more easily understood and maintainable than common procedural language code. This includes object oriented programming.

\subsection{Declarative programming}
Describes what needs to be done, rather than how to do it. Includes functional programming, logical programming.

\section{Object oriented programming}
A type of imperative structured programming.

\subsection{Objects and classes}
The main idea of object oriented programming is to describe computation in terms of manipulating states of objects. This causes state changes to be local - which helps programmers design a well structured view of state and behavior.

\subsection{Designing classes and objects}
Often nouns correspond to objects, verbs to method calls.

\subsubsection{Object composition/ aggregation}
One collates within objects various values describing object-state.

Objects often contain members which are objects of other types. These correspond to 'has a' relationships. An alternative to doing this is to pass these objects separately to methods which manipulate these objects.

One way to decide between these approaches (and thereby decide if an object should have a certain member) could be to ask the question: when a deep-copy of an object is made, is it proper that a copy of the member is made?

\subsubsection{Classes}
Based on their state-space and purpose, these objects may be described as instances of various classes, in whose definition various attributes and methods may be defined. An inheritance structure may be defined on these classes - this is described later.

\subsubsection{Encapsulation}
Hiding data and methods from outside methods restricts state changes to be local. For this, Method/ property access specifiers may be provided: public, private, protected, default. 

\subsection{Methods}
Methods: procedures associated with a class. The behavior of a method within a certain object obj - say obj.f(argList), in terms of functional programming, can be considered to be a function which accepts two argument sets: first is the object obj, and the second is the argList passed to the method.

Maybe class has events, listeners too.

\subsection{Inheritance}
Among classes of objects, a inheritance structure may be defined - Eg: class A extends class B in that it has all the members in B (with identical or overriden semantics/ behavior), together with some extra members.

\subsubsection{Benefits}
This accomplishes two things: 1] It is a neat code-reuse pattern; and 2] enabling static type-checking (in case of statically typed languages) - ie when a member $x$ is accessed, ensuring that the class has an appropriate member $x$.

\subsubsection{Multiple inheritance}
In case multiple ancestors (along distinct inheritance paths) of a class $C$ define a method with the same name $m$, the effect of the call $C.m$ needs to be disambiguated explicitly by the programmer: and the programming language should ideally provide him the ability to do so.

\subsection{Object construction and destruction}
\subsubsection{Cloning prototypes}
One way to create objects is by creating a clone. This mechanism works even where objects' types are not well defined.

\subsubsection{Deep copy}
With a deep copy, not only is a new object with the same state as the original object created, but the following happens too: any object contained within the original object is also deep copied (rather than both objects referring to the same member object).

\subsubsection{Factory methods}
Often easily accessed factory methods are provided in order to create an object of a certain class with a certain state. When these are member methods of the class in question, they are called constructors.

When an inheritance structure is present, and when a parent class has multiple constructors, it becomes necessary to ensure the calling the right parent constructor. Sequence of calling constructors: superclass first. Destructors: subclass destructor called first.

\subsection{Prototyping-based languages}
These do not provide a mechanism to explicitly define a class or inheritance structure. Objects are created exclusively by cloning and dynamically (at run-time) adding members - Classes/ inheritance are implicitly defined in this process.

\subsection{Mutability}
Some objects may be designed to be immutable (having unchangeable state). Such objects may have 'state-altering' methods which construct and return an object with the altered state.

So, object-cloning is superfluous for such objects.

\section{Functional programming}
\subsection{Computation as a vector function}
Let $D$ be the set of all scalars. Any computation can be specified as a vector function $f:D^{k_{in}} \to D^{k_{out}}$. We name the arguments to $f$ as $x_1, x_2 .. x_{k_{in}}$.

This function can in-turn be defined in terms of other simpler functions - using currying for example.

The ideal of declarative functional programming is for the programmer to be able to express computation in terms of computation of a mathematical function - despite internally using imperative programming and dealing with memory at a lower level.

\subsection{Functions without side effects}
Computation is the evaluation of math functions. \\
State changes outside the function, other than sending a return value is not allowed: functions without side effects.

\subsubsection{Dependence on non-input values}
To avoid side effects, some languages may force function behavior depends purely on input: there is no access to higher-scope variables (eg: global variables in C).

\paragraph{Closures}
However, other languages may allow function-behavior to depend on non-input values, but may not allow altering them within the function. Eg: Matlab, R.

Such non-input and non-local variables and values in the function definition are called free variables (- similar to the definition in case of first order logic). These free variables may be bound (assigned values) at run-time, just before the function is to be invoked.

Thus the precise definition of a function is finalized only at run-time - So functions with free variables essentially define a function family with a method for picking the right function from this family given some values.

\subsubsection{Immutability of input}
'Pass by reference' is not allowed as that would allow code in the function to have side-effects.

\subsection{Functions as objects}
Functions can be used as arguments and return values. So, functions can be regarded as objects.

\subsubsection{Functions acting on functions}
Aka Higher order functions. Easy to define higher order functions: Eg: $\frac{d_{n}}{dx^{n}}$. So, one can conveniently pass a function as an argument to another function.

\subsubsection{Event driven programming}
One can view some computation in terms of events and event listeners/ handlers/ callback functions which might handle them. A 'main loop' keeps polling for events and dispatching events to the correct handler. This can be easily realized with functional programming.

\subsection{Partial application}
From the definition of a function $f$ over $k$ arguments, one can derive definitions of other functions depending on $l<k$ arguments which arise as a result of fixing a value to one of the arguments of $f$. Enabling this with simple syntax is an attractive feature in many languages.

\subsection{Currying}
Any such vector-domain function can be described as a function $f'$ acting on a scalar domain (corresponding to the first dimension of the domain of $f$) and producing a \\
vector-valued function: $f':D \to G$, where $G = \set{D^{k_{in}-1} \to D^{k_{out}}}$ and $f'(a) = g \in G$ such that $g$ corresponds to the partially applied function $f(x_1 = a, x_2 .. )$.

Doing this recursively, the entire computation can be written in terms of scalar functions!

\subsubsection{Lambda calculus}
Lambda calculus provides a good representation and manipulation rules for considering computation in this way. It describes computation in terms of formulae (unnamed functions) involving many variables, which may be composed with each other; whose free variables may be bound to a certain value etc..

\subsection{Iteration aids}
Functional programming, in its purest form, does iteration using recursions.

Plus, various higher-order functions which can be defined to act on lists and iterators enable succinct definition of recursive computation.

\subsubsection{Tail recursion}
A tail recursion is a recursive function where the last statement executed before the function exits (which is not necessarily the same as the last statement in the function definition) involves a simple recursive call. The value returned, if any, is simply the unmodified result of this recursive call.

\subparagraph{Reuse of stack space}
Ordinarily an additional recursive call would involve addition of new memory in the call-stack space. This can be avoided in this case by simply reusing the stack-space already allocated to the calling function. When the language standard does not demand it, but is implemented by a certain compiler, this deserves to be called an 'optimization'; otherwise it is an integral feature of the language.

\subparagraph{Advantage}
This allows iteration to be written using a recursive call without the penalty of using space linear in number of iterations.

\subsection{Advantages}
\subsubsection{Conciseness}
Fewer bugs. 
Very concise: fewer lines of code.

\subsubsection{Highly parallelizable}
For functions without dependencies, order can be reversed, plus there are no side-effects: Thread-safe.

So likely to become popular.

\section{Decision structures}
The conciseness and clarity of expression of branching and iterative operation in different languages is different.

\subsection{Branching}
The if-else structure is the most basic decision structure, using which more convenient decision structures like the if-elseif.. structure is defined.

\subsubsection{Matching a value}
Different branches of execution often depend on different tests performed over the value of an expression. This is provided in terms of the 'match with various cases' construct.

\subsection{Iterative operations}
The essential ingredients of an iteration are the starting state, the code to be executed and the termination condition.

A basic imperative programming construct for iteration is the while loop. To handle various specialized cases more concisely, constructs such as C's do-while and for loops are defined.

The most basic functional programming construct for iteration is recursion, with efficient reuse of the stack space using tail recursion where possible. Concise definition of recursive functions is possible with the use of branching based on matching values- as in Scala.

One can then define higher-order functions which operate on iterators and lists leading to very concise statements. These are described elsewhere. 

\section{Application programming interface (API)}
To aid rapid software development, many programming languages come with libraries of objects and functions implementing common data structures like collections, file parsing etc..

\subsection{Higher order functions for lists}
Having an API with support for higher order functions acting on iterators and lists enable writing concise code.

\subsubsection{Map}
map(iter, fn) applies the fn to each element produced by an iterator and returns a iterator of results.

\subsubsection{Filter}
This produces an iterator with elements of another sequence which pass a test specified by a certain function.

\subsubsection{Set-builder syntax}
Aka comprehension. Some languages allow a succinct notation for executing some code for various elements drawn from an iterator obtained from applying a map or filter to another list(s). This is a concise way for iteration.

Eg: The for comprehension in scala. 

\subsubsection{Transformation-types}
In case of functions which produce new lists/ iterators such as maps, fitlers, one might either want the transformations to take effect one at a time while an element is being retrieved (lazy/ non-strict), or one might want a function which produces the result list/ iterator fully upon call. The former is more efficient (especially when avoiding intermediate results when doing x.map().fitler..), while the latter may be desirable to preserve modularity.

\subsubsection{Fold}
foldLeft(list, fn, b): Let head(list) be the first element in the list and tail(list) be the list without its first element. Then, if list is empty, foldLeft returns b; otherwise, foldLeft(tail(list), fn, fn(b, head(list))) is returned.

foldRight: is a function which does the same, but from the other end of the list: so one needs to modify definitions of head and tail appropriately in the above description.

\section{Parallel programming}
Parallel programs can be considered in terms of threads of computation. When data is shared, one should take care of race conditions.

\subsection{Fork and join}
With this paradigm, a thread can fork to form a new thread. \tbc

\chapter{Translation to machine code}
\section{Machine instructions and their files}
Machine instructions are understood by the processor. Assembly level code provides a way to write machine instructions using words instead of hexadecimal instructions.

\subsection{Executable files}
When an operating system is being used, machine instructions, which are stored in a file or on fixed locations in the hard-disk, should be associated with suitable meta-data/ headers. Such files are called executable files.

\subsection{Object files}
Object files contain named segments of machine instructions - library functions. These files may be linked to executable files, from which, using a mechanism like the 'call stack', data is processed using the library functions.

\section{Translation from High level programming language}
Writing machine instructions directly is excruciating - most of the work is mechanical - it is best done automatically by specialized programs which read files with precise yet high-level instructions and create machine instructions.

\subsection{Compiled vs interpreted languages}
In the case of interpreted languages, this is done one line at a time. In case of compiled languages, this is done one program or code block at a time.

Some languages, like Java are compiled to a byte-code, which is then interpreted (translated to machine language) during execution.

Run-times of programs written in Interpreted languages can slow down due to the cost of translating each line of code at run-time. This problem is assuaged with the use of 'just in time' compilers - now, loops can potentially be translated entirely to machine language before they are entered.

\subsection{Steps in translation}
During lexical analysis, lexical tokens are identified from the high level program; variable names are distinguished from constants and operators. During syntactic analysis, or parsing, the tokens are put together into a bunch of instructions. Finally, addresses are assigned to variable names, and translation happens.

During this, linking is done by a linker: references to functions described in other object files are resolved.

\section{Memory allocation}
\subsection{Static memory allocation}
This is memory allocated to data at compile time.

Memory can be considered as having been allocated at the time of function call and deallocated when the funciton exits. So, this is often visualized/ reffered to/ implemented as 'stack space'.

\subsection{Dynamic memory allocation}
This is done at run-time. One cannot be absolutely certain beforehand about the exact amount of memory a program will require. There are overheads in dynamic allocation: there can be problems such as fragmentation: data used by the same chunk of code may be located in different memory blocks (either in the main memory or in the cache on the hard disk). Allocation algorithms take atleast 50 instructions for making one allocation.

The space used for dynamic memory allocation is often called 'heap space'.

\chapter{Character encoding}
Displaying, accepting and writing to files characters readable by humans are common tasks in many programs, irrespective of language.

So, common standards have evolved to represent these characters with natural numbers or characters visible on most English keyboards or arbitrary bytes.

\section{ASCII}
This represents the Latin alphabet plus some common characters. Range: 0:255.

Special characters include control characters. 

\subsection{Control characters}
Carriage return (move cursor to beginning of current line), line-feed (start a new line), tab (a long horizontal space). Their popular latin/ symbolic representations are: '\\r\\n\\t'. Carriage return without line-feed is often used to overwrite text.

\section{Unicode}
This is capable of accomodating symbols in many of the world's scripts. It uses multiple bytes. Since the number of bytes actually needed may vary, variants such as UTF-8 are used.

UTF-8 is backward compatible with much of ASCII. If extra bytes are needed, it is indicated by a special bit.



\part{Development tools}
\chapter{Build tool design}
\section{Build Targets}
A programmer may want to do certain specific actions with his code.

For example, downloading dependencies for being able to compile, compiling code, running test cases, running the code, packaging the code, deploying a package on a web-server. These actions are called build targets.

\subsection{Continuous mode}
With some dependencies, one can execute a specific action while constantly scanning for source code changes..

\subsection{Target Dependencies}
There may be various dependencies amongst these build targets. For example, to compile one may need to download some libraries from the internet.

\subsection{Library dependencies}
Some build tools offer automated library dependency management, where if a repository and the dependencies are specified, the dependencies are automatically downloaded from the internet.

\section{Quality metrics}
A good build system provides a concise way of declaratively expressing actions to be performed for various build targets: So, various commands for actions like downloading should be available.

Some build systems are also integrated with IDE's'.

\chapter{Build tools}
\section{sbt}
Scala build tool is written in scala. Configuration files tend to be very concise. See a ready empty sbt project for a quick start.

Important commands include: update (To satisfy dependencies), actions, compile, package. Some commands may be prefixed by \~ (Which constantly scans for source code changes and recompiles automatically when necessary.)

\subsection{Configuration}
\subsubsection{Repository specification}
By default, Maven2 and Scala Tools Releases repositories are used. One can add other repositories: resolvers += name at location.

\subsubsection{Dependency management}
In build.sbt in the project folder, add the following line:
\begin{verbatim}
libraryDependencies += groupID % artifactID % revision
\end{verbatim}
If you are using a dependency that was built with sbt, double the first \% to be \%\%:

One can explicitly specify the url above by adding 'from "url1"' to the line above. The url is used only if it is necessary.

One can also add 'sbtAction' to indicate that the library dependency need only be included if a certain sbtAction is to be performed.

\section{maven}
Build configuration files are in xml, which tends to lead to bloated configuration files. 

\chapter{Task management}
These services/ software are used to manage bugs, features, issues. Issue management is often bundled with project hosting websites which offer version control.

\chapter{Version control software}
\section{svn}
General syntax: svn command arguments.

For help, see svn help.

Commands include: commit/ ci, diff, update/ up, merge, resolved, status/ st.

To rollback a file to a previous revision: svn merge -r newRev:oldRev filename.

\section{hg / mercurial}
For help, see hg help. Emphasizes distributed backup and scalability; tries to overcome some deficiencies of svn - like trying having an idea of separation between private local and global/ shared repositories.

General syntax: svn command arguments.

Commands: clone repo [destination]: checks out a repository to create a 'local' repository.

status/ st.

commit/ ci -m ``msg'': commits to the local repository. push: commits to the central repository.

\section{Version control websites}
\begin{itemize}
\item sourceforge uses svn.
\item Google projects uses hg, svn and  git.
  \subitem Shows activity level, number of active contributors, lines of code prominently.
\item github hosts git projects
\item bitbucket hosts hg projects.
\end{itemize}


\part{General purpose programming}
\chapter{C++}
\section{Building and executing code}
Write file.c, or file.cpp, file.h (header files). Use gcc.

\subsection{Point of entry}
The main() function.

\subsection{Help}
Use man command on linux.

\subsection{Debugging with gdb}
file reads in a source file.

\subsubsection{Setting breakpoints}
To set breakpoint: break mexFunction.

stop in, stop at: Stop in a particular function, stop at a particular line

\subsubsection{Debugging after stopping}
Once the debugger has stopped, can use: step, continue, exit etc.

where, whereami: Show the call stack, show the current location.

print: Display the value of a variable.

\section{Pre-compilation processing}
\subsection{Literal substitution}
\#define SYMBOL literal

\subsection{File inclusion}
 \begin{verbatim*}#include<filename.h>\end{verbatim*}

\subsection{Comments}
\begin{verbatim*}
\\ This is a one line comment. 
\*
A multiline comment
*\
\end{verbatim*}

\section{Variable and data types}
\subsection{Declaring a variable}
dataType variableName ( = value);

\subsection{Integer datatypes}
char, short, int, long int.

\subsubsection{Values}
Character values: 'a'.

\subsection{Floating point datatypes}
float, double, long double.

\subsection{Qualifiers}
unsigned, long.

\subsection{Pointers}
char* c, short* c, char** or char[][] etc.. The values contained in these variables actually point to a memory location, where the actual data is stored.

\subsubsection{String and array values}
char* c = ``asdf''; int* c = new int[5];

Memory is allocated automatically.

\subsubsection{Function pointers}
void (*foo)(int); declares a pointer. void *(*foo)(int) declares a pointer to functions which take an int argument and return a pointer.

\subsubsection{Accessing location vs value}
Consider int *c = 5;. c refers to the address, whereas *c refers to the value. So, if you want to update the value to 6, you should do: *c = 6;.

Addresses of non-pointer variables can be accessed using \& operator.

If c points to a structure or an object with a member m, $c->m$ gets to the value corresponding to the member.

\subsubsection{Dynamic memory allocation}
Functions like malloc(), calloc() reserve some memory in the heap, and return the address of the beginning of the reserved memory block.

\subsection{Classes}
\subsubsection{enum}
This creates a new data type with some finite domain.

\subsubsection{struct}
struct className BLOCK; declares the most simple class. This does not have any access modifiers or member functions.

\subsubsection{General defintion}
class className (extends XYZ) BLOCK;

The block contains vairable and function declarations as usual.

Access modifiers of the form public: may be used.

\subsubsection{Object instantiation}
className obj;

\section{Code structure}
\subsection{Sentence syntax}
Every sentence ends with ';'. For comment syntax, see pre-compilation processing.

\subsection{Code block}
(codeBlock) \{\} encloses a multi-line block of code.

\subsection{Scope of variables}
Variable declared within a block of code is limited to it. Global variables may be accessed from anywhere.

\subsection{Syntax of functions}
returnType function(optional input parameters separated by ',') 
\{code\}.

Function names must be viewed as placeholders for memory locations of function instructions.

\subsubsection{Function invocation}
fn().

A function referenced in any part of the code should have been declared before-hand.

\subsection{Decision structures}
\subsubsection{Branching}
if(condition) codeblock else codeblock.

switch(variableName) case value: codeblock (with break;) default: (with break;).

\subsubsection{Looping}
for(initialization; condition; increment) codeBlock.

while(condition) codeblock.

do codeblock while(condition).

break and continue are used to exit or skip iterations.

\section{IO}
Include libraries stdio.h and file.h.

\subsection{printf}
This is a very common formatted printing API borrowed in many languages.

\%.2f prints a floating point number upto 2 decimal points.

\subsection{Interact with the shell}
Execute system commands: system().

\tbc

\section{Library functions}
\subsection{Math}
math.h: exp, pow.

\subsection{Graphics}
Use ncurses.h.

\chapter{Python}
\section{Distinctive features of the language}
Compared to C or Java, 1/3 to 1/5 code requried. Thence, higher productivity, software quality.

Good libraries. Can easily interact with C or Java code, and even extend classes specified there.

Program portability: Often compiled to bytecode, which is then interpreted into machine leanguage instructions.

Garbage collection.

Has Object oriented programming option; can also be used as a procedural or functional programming language.

Clean and concise syntax: compare to perl; so more readable.

\subsection{Speed}
An interpreted language. Speed is many times slower than C or Java. For vector operations, speed comparable with Matlab; but for looping, may be faster.

\section{Writing, Building and executing code}
Make .py files; begin with \verb #!/usr/bin/python .

\subsection{Important env variables}
PYTHONHOME: location of the std libraries. PYTHONPATH: default search path for module files, may refer to zipfiles containing pure Python modules (in either source or compiled form). PYTHONSTARTUP.

\subsection{Good IDE's}
Eclipse with pydev. idle.

\subsection{Point of entry}
Can use interpreter. Or first line in file.py.

"python -c command [arg] ...", "python -m module [arg] ...", which executes the source file for module

\subsubsection{Arguments}
sys.argv, a list of strings has the script name and additional arguments from shell; an empty string if no argument is given.

\section{Help}
help(object)

\section{Code structure}
\subsection{Statement syntax}
Statements end with new line.

\subsubsection{Commenting}
Single line of comment begins with \#. \verb ''' encloses multiline comments.

\subsection{Code blocks}
Blocks of code are indented using a tab character.

\subsubsection{Invocation of functions}
fn(arg1, arg2). Arguments passed by reference. Can unpack tuples and pass: fn(*tuple).

\subsection{Decision structures}
ConditionSpecifier: followed by code block, where condition specifier can be if(condition), elseif, else etc.. Note that the () around conditions is optional.

Similarly while $a<b$:, for i in tuple:.

Python does not have the switch statement.

\subsection{Functions}
def fn(args): followed by a code block. Note that even functions are actually objects, and they can have an internal state which can change with each call.

\subsubsection{Return value}
By default returns None object. Can optionally specify default value. Otherwise, use the return statement.

\section{Variable and data types}
Variables are dynamically typed. Everything is an object.

None is the empty object.

\subsection{Complex numbers}
Complex numbers: 1j * complex(0,1).

\subsection{Lists}
Commonly used data-structure classes include lists, tuples, buffers, and xrange objects.

Lists are heterogenous: they can have objects of any type. They can be used as stacks too!

List indexing is done with [i].

lists are specified by: [a, b, c];  range function is very useful for generating lists.

\subsubsection{Tuples}
Tuple is a non-mutable list; so it is faster.

tuples are specified by: a, b, c  or  ()  or  (d,).

\subsubsection{Sequence operators}
in, not in, +, *, s[i], s[i:j], s[i:j:k], len, min, max. push, pop.


\subsection{Strings}
Strings eclosed with ' or ``. Multiline strings enclosed with '''. Line breaks provided by \textbackslash. strTmp="string formatting operator \%\% is like \%(familiarFunction)s" \%\{'familiarFunction':"sprintf()"\}.

Unicode: u' a unicode \textbackslash u0020 string !'.

Important string functions include (l/r)strip, split.

\section{Data manipulation}
\subsection{Operators}
Arithmatic operators: **: exponentiation; rest are as in C.

Comparison operators: as in C.

Logical operators: and or not.

\subsection{Type casting}
float(), str() etc..

\subsection{Objects}
dot operator as in a.real, a.imag accesses object contents.

A function is actually an object in the global namespace too. So, can say: function.\verb __doc__ .

os.copy makes a deep copy.

\section{Important library functions}
\subsection{System}
import os. os.environ.get("HOME"). os.system(), os.popen .

\subsection{File I/O}
\subsubsection{Matlab format}
import scipy.io. \\
X = scipy.io.loadmat('mydata.mat'), scipy.io.savemat().

\subsection{Numeric programming}
numpy.

\subsection{Using External libraries}
Pure python modules vs Extension modules which use libraries compiled with other languages.

\subsubsection{Installing and using}
Place a link in the site-packages directory. Or run python setup.py build, python setup.py install.

Use: from libraryName import *.

\section{Interfacing with other languages}
\subsection{RPy or RPy2 for R}
No easy plotting in sage.\\
 from rpy import *. r.library ("..",  \verb'lib_loc =os.path.join(lib_path, "R"))'.

\subsection{With Matlab}
In sage use 'matlab.eval()'.

\chapter{Java}
\section{Distinctive features of the language}
\subsection{Purpose of design}
Platform independence: so no direct access to memory.

Object orientated approach.

Memory management: Garbage collection.

\subsection{Speed}
Compiled into bytecode which can be run everywhere using native interpreters. Due to many optimizations - such as 'just in time' compilation, speed comparable with C for many applications.

\section{Writing, Building and executing code}
\subsection{Good IDE's}
Eclipse, netbeans.

\subsection{Point of entry}
SomeClass.main(String[] argVector).

\subsection{Environment variables}
CLASSPATH.

\subsection{Building}
Ant is a popular format/ tool for writing build-scripts for java.

Java packages are often exported as jar files; one then needs to add a jar file to the classpath. Within a jar file's manifest, one can specify a class which contains the main method, which will then be invoked upon using the command 'java -jar JARFILE'.

\subsubsection{Decompiling}
Java decompilers are also available.

\subsection{Help}
Extensive javadocs, internet.

\section{Data types, operators}
Data are either objects or primitive data types.

\subsection{Primitive data types}
void, byte, char, int, double.

\subsection{Objects}
Even classes may be considered as special kinds of objects. All variables pointing to objects are actually references.

\subsubsection{Object creation}
variableName = new ClassName( arguments for the appropriate constructor );

Objects are created by calling the appropriate constructor: variable = new Object(..);.

\subsection{Operators}
Same as in C. '.' indicates membership or namespace.

\section{Low level code structure}
\subsection{Sentence syntax}
Code blocks and sentence syntax are same as in C.

\subsubsection{Commenting}
C style comments. Plus, /** javadoc documentation generation */.

\subsection{Decision structures}
Same as C.

The following is allowed Java 5 onwards: for (String arg : args) statementBlock.

\section{Classes}
\subsection{Containment and nesting}
Packages are essentially name-spaces; and it contains classes. It exists in the form of a directory file.

The first line of any file defining a class should indicate its package, with the syntax: package PackageName;.

Classes can be nested.

\subsection{Inheritance and polymorphism}
A class can extend the definition of another class, while implementing many different interfaces. All classes extend the Object class.

A final class cannot be extended.

\subsubsection{Abstract class/ Interface}
This is Java's way of implementing multiple inheritance, without having to deal with the ambiguity of having to select which function definition should be used by a subclass, two of whose parents define the same function.

Functions declared in an interface cannot be defined there: they should be defined in implementing subclasses.

\subsection{Hyperclasses}
Aka Generics/ Templates. Interfaces can be used for polymorphism: Eg: List.add and List.get can act on objects of any type. But, the value returned by such a generic method may need to be cast before it can be used by the caller Eg: list.get(0).

This drawback can be removed using generics: one can parametrize classes with types. Eg: \verb List<Integer> .

\subsection{Definition}
Syntax: accessModifier interface/ class <Type> INTERFACENAME codeBlock.

Access modifiers are public, final and default (which is assumed if nothing is specified). They decide whether an object of the corresponding class can be created in code defined in other classes.

\subsubsection{Referring to classes}
When referring to classes, the namespace (Eg: packages.subpackage.Class) should be fully specified, unless there is a line in the file which says import packages.subpackage.*;. 

\subsection{Class members}
A class can contain methods and properties: these are called class members.

\subsubsection{Access modifiers}
Scoping and access modifiers for class members are: public, private, protected, default (assumed when an access modifier is not specified explicitly), static, final (only for properties). Static members can be invoked without the creation of an object. Final properties are immutable.

Public members can be accessed and modified by code from other classes. Private members can be accessed only by code in the same class. Protected members can be accessed by code in the class and its descendants.

\subsubsection{Properties}
Syntax: AccessModifier dataType variableName (= optional initialization).

\subsubsection{Methods}
Syntax: AccessModifier returnType functionName(ArgumentList) CodeBlock. The method definition should contain an appropriate return statement: return XYZ;.

Invocation is same as in C. Arguments of Primitive datatypes are always passed by value, whereas object arguments are passed by reference.

\subsection{Special methods}
\subsubsection{Constructor}
A constructor is the method called by default when an object is created. If a constructor is not defined, a default constructor is used.

Constructors do not declare a return type explicitly. Otherwise, it is same as a function.

The constructor of the superclass is called before its own constructor is called. If a constructor calls a specific constructor of its superclass, it should do so in the first line.

\subsubsection{Destructor}
\tbc

\subsubsection{main function}
A main function, being the point of entry for the code, should be declared as having the attributes: public static, and the return type void.

\subsection{Important classes}
\subsubsection{Arrays}
Arrays are actually objects of certain classes. Array indexing starts from 0, as in C. Example of an initialization

\verb'{a, b, c}' specifies a 1 dimensional array with 3 members.

Multidimensional arrays in java are actually arrays of arrays: so var[0] and var[1] may be of different length.

Array indexing is done as in C.

\subsubsection{String}
Important methods include: substring, indexOf, startsWith, contains.

split(regex).

\subsubsection{Collections}
There are interfaces $List<T>$, $Set<T>$, $Map<A, B>$. These are implemented in classes such as ArrayList, LinkedList, HashSet, HashMap.

Libraries like GNU Trove provide high performance native language libraries of collections.

\subsection{Important Superclasses, interfaces}
\subsubsection{Serializable}
Implementing Serializable ensures that an object instance can be stored in a file and retrieved later.

\subsubsection{Clonable}
Implementing the Cloneable interface ensures that the traits of a given object can be copied using the copy() definition. ArrayList internally uses an array, but if copy were implemented such that only the reference to the internally used arraylist were copied, then both copies would be affected by any change in the arraylist. Hence, it is important to override copy() as appropriate.

\section{Exception handling}
\verb|try CODEBLOCK catch(ExceptionType e) CODEBLOCK| All exceptions descend from the Exception class: see javadoc for details.

Exceptions may be checked or unchecked - depending on whether the compiler forces the program to check for and handle exceptions thrown by a certain subprogram. Run-time exceptions usually go unchecked.

Exceptions of the type Error cannot be caught usually.

\section{Multi-Threaded programming}
The main thread always exists. Apart from that, other threads can be started. Extend the Thread class or implement Runnable interface. Threads can be started or interrupted. Threads can run or wait or sleep.

The synchronize keyword is used to enforce mutual exclusion from critical code blocks or methods.

\section{Library functions}
In general, search on the internet. Apache hosts many well maintained projects.

\subsection{Mathematics}
Colt and apache common math packages are widely used and maintained. The former is said to be more optimized : reportedly 2-3x slower than using fortran routines. Linear algebra operations on the latter reportedly seemed to be 6x slower.

\subsection{Data structures}
java.util has several classes, Eg: Set, List and their subclasses/ implementations. 

Chief classes implementing the List interface: ArrayList (not thread-safe).

\subsection{IO}
Use the System.io object.

\subsubsection{Read configuration files}
Reading parameters from properties files, which store (key, value) pairs in lines with the format key= value is a very common task. So, there are specialized functions to deal with them: props = new java.util.Properties();  props.load(fileStream);.

\subsubsection{File operations}
java.io.File has useful functions: exists(fileName), list() to list contents in case it is a directory.

\subsection{Logging}
Use java.util.logger.

\subsection{Unit testing}
Use junit.

\section{CGI programming}
\subsection{Writing servlets}
One must use the servlet API (preferably provided by the webserver being used) and create classes which extend HttpServlet, in which doGet and/or doPost methods are overriden.

\subsubsection{Reading input}
To decode HTML escaped characters, one can use the apache.commons.text package.

getParam, getParamMap.


\subsubsection{Output}
outStream object will have methods like setContentType, setEncoding, println.

\subsection{Mapping to URL}
One then maps a url to a servlet in the WEB-INF.xml file, using the \verb'<servlet>' and other tags.

\chapter{Scala}
\section{Distinctive features of the language}
\subsection{Java compatibility, similar properties}
Scala bytecode is no different from Java bytecode. So, Scala shares the same properties as Java in terms of platform independence, speed, memory management, static typing etc..

\subsection{Purpose of design}
It allows us to do functional programming (creating anonymous functions, passing higher order functions) along with object oriented programming.

\subsection{Conciseness}
Scala is said to be significantly more concise than Java and slightly more concise than Python.

Scala's ability to pass function-objects make it concise to iterate over collections using foreach.

\section{Writing, Building and executing code}
\subsection{Good IDE's}
Plugins to Java IDE's.

\subsection{Environment variables}
SCALA\_HOME pointing to the scala directory, other variables required by Java.

\subsection{Building}
Analogous to javac one has the scalac command.

\subsubsection{Point of entry}
main(args: Array[String]) method.

\subsubsection{Interpreter}
Using the scala interpreter, one can also run scripts or even individual commands typed in one at a time: but these are implicitly compiled to bytecode and run using the JVM.

\subsection{Packaging}
In order to run in an arbitrary machine, it is important for the scala-lib.jar to be packaged along with the project files.

\subsection{Help}
Extensive scaladocs, internet.

\section{Data types}
Scala is statically typed: even though it may only be made apparent by the value assigned to it. So, the compiler will not accept changes to the type of the variable by accepting values of different type.

\subsection{Pure object-ness}
Every value is an object. String values are represented as in Java. All operators are actual functions/ methods. But, this does not come at the cost of slower performance.

\subsection{Variables, constants}
var varName: Type = value. Constant: val valName = value. The ': Type' is optional.

\subsubsection{Object instantiation}
var varName = new className(argList). Sometimes, helpful factory methods are provided to avoid having to use 'new': Eg: List(), Array[Int].

\subsubsection{Basic literals}
Strings are enclosed in "". Chars are enclosed in ''. Int is written using numerals: 89.

\paragraph{Arithmetic operations}
1/5 returns an integer: that is the way the /(int, int) function is defined! But, 1/5.toDouble returns the double 0.2.

\subsubsection{Function objects}
The type for a function argument is specified with: (argList)=>returnType.

\subsection{Type variables}
type T = Char

\subsubsection{Type objects}
c.getClass or classOf[C]

\subsubsection{Classes}
Described in a separate section.

\subsection{Type conversions}
\subsubsection{Explicit}
obj.asInstanceOf[Type]. Or use an appropriate match statement.

\subsubsection{Implict}
There is syntactic sugar to allow implicit conversion of a value from type A to B in order to invoke a method x() defined for B but not on A.

To do this, one defines the class B with constructor B(val: A) and the new method x(). One then specifies the implicit conversion function: implicit def x(val: A) = new B(val). 

Such an implicit conversion is defined in a singleton object O, whose methods can be imported to the global name-space using 'import O.\_'. \htext{scala.predef}{http://www.scala-lang.org/archives/downloads/distrib/files/nightly/docs/library/scala/collection/immutable/StringOps.html} contains implicit conversions which are automatically imported.

\subsubsection{To Anonymous types}
One can do this: 	
implicit def x(i: Int) = new {
  def $<$(str: String) = str.length $<$ i
}

Doing this, one can easily overload the $<$ function.

\subsection{Important types}
Classes important because of the type hierarchy are described elsewhere.

Functions and collections are described in a separate sections.

\subsubsection{String}
This is actually same as java.lang.String. See various useful functions specified for java String.

\paragraph{Implicit conversions}
But, it is implicitly cast as List[Char], which enables the use of list methods. There are also implicit conversions which allow the following methods: +=.

\paragraph{Literals}
Apart from "java strings", one can use """literal string""".

\subsubsection{Regular expression}
\paragraph{Syntax}
Creation from strings: \verb'"""\w+\d+""".r'.

Subpatterns are specified using (). In case one wants to use () in the regular expression sense, arther than to specify a match group [As in M(r|s)], one uses:  (?:).

regex1.pattern returns the java.util.regex.Pattern object.

\paragraph{Extract all matches}
regex1.findAllIn(str1) returns Iterator[Match].

Each Match object, which contains the group list, whose first element is the entire matched string, and substrings within it corresponding to subpatterns specified in regex1 appear next.

\paragraph{Replacement}
replaceAllIn(String, Match => String)

replaceAllIn(String, regExpStr), where regExpStr is of the form \verb|"$1 $2"|

\paragraph{Multi-pattern matching}
val regex1(var1, var2) = str1. This does string matching and grouping as defined by regex1 and assigns the matched groups to the var1 and var2.

\paragraph{Checking match}
regex1.pattern.matcher(str1).matches



\section{Functions}
\subsection{Anonymous functions}
(argList) $=>$ statementBlock . If only one argument is accepted, one can write: arg $=>$ statementBlock.

The syntax for specifying the argument list is described elsewhere.

If an anonymous function consists of one method application that takes a single argument, you need not explicitly name and specify the argument: so \verb print  can be an anonymous function, so we can write args.foreach(print).

\subsubsection{Contextual conciseness}
\verb'lst.foldLeft(10)(_ + _)'

\verb'lst.map(1+)'

\subsection{Named functions}
In the case of named functions, the only difference is that one writes def fnName [TypeList](argList):  = statementBlock. Observe that $=>$ is not used here.

\subsection{Type List}
The [TypeList], when present, declares a kind of hyper-class of functions whence objects are created as appropriate.

TypeList is comma separated, each element of which could either be a single literal, or something like A $<:$ AnyRef which means A which is subtype of AnyRef.

\subsection{Argument list}
arg1: type1 = defaultValue1, arg2: type2 .. When the compiler can infer it, the types may be omitted.

\subsubsection{Implicit arguments}
If the sole argument to a function f(implicit arg) is prefixed with the keyword implicit, it will be provided automatically when invoked \verb f , provided a value of the appropriate type has been defined with 'implicit val x = value'.

This especially is useful in order to define functions which make use of values implicitly defined by the run-time environment/ virtual machine (eg: objects of type Numeric[T]).

\subsubsection{Variable number of arguments}
Use arg2: type2* for the last argument in the list.

\subsection{Return value}
By default the last expression evaluated in a function is returned. Return statements are of the form: return value.

'Unit' is akin to void in C.

\subsubsection{Returning functions: shorthand}
def fn(argList): (argList1) => retVal1 statementBlock declares that fn returns a function with a certain signature.

Alternative notation for this is: def fn(argList)(argList1):retVal1 statementBlock.

\subsection{Function type}
The type of any function is specified using the notation: (argTypeList) => returnType.
This is syntactic sugar for the Function0 .. Function9 traits. Of these, the Function
trait is an alias for Function0. One can define functions as objects with the trait FunctionN, but only one apply() function is then allowed.

Function1 has a subtrait called PartialFunction which requires the isDefinedAt() method to be specified.


\subsection{Partial application}
var g = f(5, \_:Int, \_:Int).

\subsection{Currying}
One can always declare a curried function using the syntax for defining functions which return other functions. To convert an existing function to a curried fn, one can use Function.curried.

\subsection{Composition}
val fnComposed = fn1 compose fn2


\section{Class}
\subsection{Definition}
class className[Type](argList) { .. } creates a class. Both the Type and argList parameters are optional. When [Type] is provided, one is essentially declaring a hyperclass/ generic template, using which classes of various types can be referenced.

\subsubsection{Nesting classes}
It is possible to define one class within another.

\subsection{Constructors and destructors}
\subsubsection{Main constructor}
This creates an object, and sets all the fields and executes top level code contained in the class.

\subsubsection{Auxiliary constructors}
Define methods named this().

\subsubsection{Destructor}
Define the override protected def finalize : Unit. Usually used to clean up files.

\subsection{Methods}
\subsubsection{Define method}
For syntax, see the section on functions. As a method is a member of an object of a class, one of its arguments is implicitly that object. So, it has the ability to modify the state of the corresponding object.

\paragraph{Methods without arguments}
Argument list can be omitted in the definition. Eg: def a=expression or def a()=expression. The utility of such methods is apparent if one remembers that the object is implicitly passed as an argument to them.

\subsubsection{Special methods}
If the method name ends with \_= as in fn\_=, one can invoke it using objVar.fn = arg1.

Defining an apply function enables one to use the function notation to invoke it. Eg: obj() is same as invoking obj.apply().

Defining the unapply function enables one to define what happens when ClassName(val) is used as a possible value in a match-case statement.

\subsection{Attributes}
Arguments passed to while constructing the class are always stored as attributes.

A class can contain various members which are variables and values: defined using the var and val keywords.

\subsection{Access modifiers}
For both attributes and methods: public, private. For methods: virtual.

These can be prepended to a member's definition, or one can assign it to several members by using a line like: 'public:'. 

\subsection{Hierarchy and inheritance}
\subsubsection{Inheritance}
Inheritance from Java classes is possible.

To override a method, use the override keyword in method definition.

Clever syntax allows multiple inheritance.

\subsubsection{Traits}
Akin to an abstract class in C++, one can define Traits. In these one can define methods, unlike interfaces in Java. This is done using trait traitName \{ .. \}.

Only Traits (not ordinary classes) can participate in mixins/ multiple inheritance.

\subsubsection{Syntax}
To extend a trait or class T1, one writes: class/ trait A extends T1. For multiple inheritance (aka mixin-class composition), one says

\verb|extends T1 with T2 with T3|.

\subsubsection{Mixins at runtime}
One can also define classes inheriting various traits at the time of instantiation of objects (aka mixin various traits). To do this: new Dog with ExclamatoryGreeter .

\subsubsection{Call superclass methods}
Use super.f(). In case there is ambiguity due to multiple inheritance, use: super[AcestorClass].f.

\subsubsection{Type hierarchy}
At the bottom of the type hierarchy (ie they extend everything) are the classes Null (which is the descendent of any descendent of AnyRef), Nothing (which is the descendent of any descendent of Any). null is an object of type Null. It can be cast to almost any type.

At the top of type hierarchy is the Any class, whose subtypes AnyVal is the ancestor of all basic types (Character, Int etc..) and AnyRef is an ancestor to all classes and introspection methods.

\subsection{Special classes}
\subsubsection{Singleton object}
There are no 'static' members, so one has singleton objects.

object className { .. } instantiates a singleton object. If the class className has not already been defined, this defines it. If the class className has already been defined the singleton object thus created is called a 'companion object', which has special privileges like access to private members of other objects of the same class.

\subsubsection{Case class}
These are special classes objects of whose type may be fed to the 'match' function wherein code can be conveniently executed appropriate to the object's internal state.

Example definition: case class Number(value:Int).

Objects of these classes can be instantiated without using the new keyword. 

\section{Collections}
Some collections are mutable (which does not fit the functional programming paradigm) while others are immutable. The principles of various general operations on lists are described elsewhere.

All collections are hyper-types: ie they require a type parameter in their definition: Collection[Type].

\subsection{Creation}
All collections have factory functions with a uniform syntax for their creation: besides using specific class constructors. 

Eg: Traversable(1, 2, 3)

Iterable("x", "y", "z")

\verb' Map("x" -> 24, "y" -> 25, "z" -> 26)'

\subsubsection{Numeric types}
0 to 2 creates an iterator object. Similar is the until() function.

\subsubsection{Conversion from java}
\begin{verbatim}
import scala.collection.JavaConverters._
javaCollection.asScala
scalaCollection.asJava
\end{verbatim}


\subsection{Array}
This corresponds to a Java Array, but is implicitly conversion/ wrapping to a mutable.WrappedArray, which extends Seq.

\subsection{TraversableOnce}
This is the ancestor of both Iterators and Traversable.

\subsubsection{Mapping}
map, flatMap = map().flatten. Conversions: toArray, toList, toMap ..

There are also the zip and unzip functions to combine and uncombine two lists.

\subsubsection{Folds}
foldLeft (/:), foldRight (\verb :\ ), reduceLeft, reduceRight, sum, product, min, max.

\subsubsection{Checking element conditions}
forall, exists, count : all these accept a Boolean valued function.

\subsubsection{foreach}
This does an action for each element in the iterator.

\subsubsection{Set-builder syntax}
Aka for comprehension. 
\verb'for iteratorBlock statementBlock'. The purpose is that the statementBlock should be executed for values drawn from a certain iterator I, which may be defined in terms of values filtered and drawn from other multiple source iterators.

The iteratorBlock, which specifies the iterator whence values are drawn, is enclosed by () or \{\}. It specifies one or more values drawn from iterators - specified by $arg <- iter$ and filters/ guards specified by if(condition). The $<-$ states that arg is a value drawn from the source iterator iter. In addition, it may contain any other statement required for defining the values composing I.

By default, values are drawn fully from the iterator I before the statementBlock is executed - so its alterations of variables affecting the definition of the iteration block has no effect. But, this can be changed by using lazy evaluation function view (aka non-strict view) of iterators instead of the iterators themselves - iter.view.

\paragraph{Yield an iterator}
One can even use this to get the final iterator I by replacing the statement block with an appropriate 'yield elementInI' line. This essentially makes it equivalent to using 'map'.

\subsubsection{Element indexing}
find, indexOf.

\subsection{Iterator}
This extends TraversableOnce. The iterator is not a collection itself, but a way to access items in a collection one at a time - and has methods like next() and hasNext().

But, it is traversible once - so using functions like size, find etc.. irreversibly moves the index to the appropriate position.

\subsubsection{Subiterators}
take, drop. takeWhile, dropWhile return prefix and suffix iterators. slice returns an arbitrary slice. Filtering methods: filter, filterNot.

\subsubsection{Growing}
++, padTo, +, -.

\subsection{Traversable.iterable}
This trait extends TraversableOnce.

\subsubsection{Conversions}
Besides methods from TraversableOnce, there is 'iterator'.

\subsubsection{Filtering}
Also see TraversableOnce. In addition, withFilter fitlers elements in the collection does filtering in a lazy/ non-strict way to produce a Seq object.

\subsubsection{Partitioning}
splitAt, groupBy, partition.

\subsubsection{Element retrieval}
Also see TraversableOnce. In addition: head, last.

\subsubsection{Sublist retrieval, growing}
Its methods for retrieving subcollections and for growing its size are same as in case of Iterator. In addition, it contains tail.

\subsection{Seq}
These extend Traversable.iterable. Those extending Seq are mutable and immutable.

\subsubsection{Indexing, element access}
They have the apply(), which enables accessing elements using the function-call syntax.

Other useful members: indices, indexWhere ..

\subsubsection{Sorting, reversal}
sortBy, reverse.

\subsubsection{Comparisons}
startsWith, endsWith, contains.

\subsubsection{Multiset operations}
intersect union diff distinct.

\subsubsection{Conversion}
seq.view gets a SeqView object, which ensures lazy/ non-strict evaluation of Seq-producing operations.

\subsection{SeqView}
This extends Seq, but all list/ iterator producing operations on it are done in a lazy/ non-strict way.

\subsection{ArrayBuffer}
This has the same semantics as an Array, but is more flexible and is iterable -as described in the data-structures survey. Also, it features constant-access-time.

\subsubsection{Data creation}
Use the constructor to set an initial size for the buffer. Then, use padTo(length, value) to increase the size of the array as necessary.

\subsection{List}
List extends Seq.immutable, and contain homogeneous elements. Any list method returns a new list, but does not modify the existing list.

\subsubsection{List creation}
Functions: List(valueList), Nil, val1::val2::Nil.

\subsubsection{Add elements}
Concatenation function: :::, insertion at the head: ::.

\subsubsection{Drop elements}
drop(2).

\subsubsection{Get sublists}
listVar(k). slice(a, b)

\subsubsection{Iterative alteration}
reverse. sort(binaryComparisonFn).

\subsubsection{Removal}
remove(checkerFunction).

\subsubsection{Sorting}
sorted, reverse.

\subsubsection{String representation}
\verb mkString("\n") .

\subsubsection{Option}
A zero or one element List used in returning results from operations on collections. This is either a Some or a None object, the former of which has a value.

\paragraph{flatten}
Suppose that f(x) returns Option[T]. It is common to do var1.map(f), which returns List[Option[T]].

Some elements of this list may be None. In order to convert this to a List[T] while skipping over None objects, one can invoke flatten: var1.map(f).flatten. A shortcut is to say: var1.flatMap; described in general for Lists.

\subsection{Set}
The concept of a set is implemented as a pair of traits: mutable and immutable (located in packages scala.collection.(im)mutable). 

These are extended by mutable and immutable HashSet classes. These are hyperclasses: so the type is HashSet[ElementType].

\subsubsection{Adding elements}
Use the += method which accepts multiple parameters to be added.

\subsubsection{Membership check}
contains()

\subsection{Map}
As in the case of a set, this is implemented as a pair of traits: mutable and immutable, and placed in different packages. They are extended by mutable and immutable HashMaps. A HashMap is a hyperclass, so its type is HashMap[KeyType, ValueType].

\subsubsection{Creation}
Map(tupleList) factory method. Iterator.toMap.

One simple way to create a map literal is: \verb'Map("Dave" -> "Bass", "Tony" -> "Guitar")' - this is enabled by implicit conversion of strings to a special object on which the \verb ->  method is defined.

\paragraph{Traversable[Traversable]}
toMap if there are 2 traversables. Or do groupBy(Traversable => keyElement).

\subsubsection{Adding elements}
The += method accept appropriate 2 element tuples as arguments. 

map(key) = value or put(key, value).

\subsubsection{Accessing elements}
Can say map(key) or map.get(key)  or getOrElse - get() does not throw an exception but returns an Option object.

\subsection{Tuples}
These are immutable and its members may be heterogeneous. This is a hyper-class, whose actual type depends on the values it holds. Eg: (1, "df") is Tuple2[Int, String].

\subsubsection{Creation}
var pair = (1, "asdf"). \verb'1 -> "asdf"'.

\subsubsection{Accessing members}
\verb pair._1 . Iteration can be done using the  productIterator method.


\section{Code structure}
\subsection{Sentence syntax}
A statement ends in a newline or a semicolon. A block of statements is enclosed in \{\}.

\subsection{Documentation}
As in Java.

\subsection{Mutliple assignment}
val (var1, var2) = tuple1. val Array(var1, var2) = arr. Similarly one can unpack Seq, List etc..

Multiple assignment using regular expressions is described elsewhere.

\subsection{Function invocation}
f(val1, val2). fn(arg1 = val1, arg3 = val2).

\verb fn  will suffice if there is no argument.

\subsubsection{Methods taking one arguments}
\verb'df format now' is same as df.format(now). This is the infix syntax, considering the containing object as one operand.

So, as everything is an object, 1 + 2 is same as (1).+(2).

\subsection{Decision structures}
while loops are as in java. if-else blocks are as in Java.

One can also use various methods and comprehensions defined for collection data types.

\subsubsection{Switch case statements}
testVar(s) match {caseStatementList}.

Note that one can match values of pairs of variables: (a, b).

A caseStatement is usually of the following form: \verb'case matchValue => codeBlock'. The default matching value is denoted by \_.

Once a certain case is executed, other caseStatements are not executed.

\paragraph{Match value patterns}
Alternatively, one can match the data type: \verb'case x:Color => x'. One can also have patterns of the type: \verb'val1 | val2 .. '.

One can also match state variables within an object of a 'case class': \verb'case Number(1) ..'.

\section{Exception handling}
try{statementBlock} catch {caseStatements}. Each caseStatement in the catch block checks the exception type as in the case of the match function. Eg:   case e:IllegalArgumentException => e.printStackTrace() .


Exceptions are thrown as in Java.

Since Scala has no checked exceptions, Scala methods must be annotated with one or more throws annotations such that Java code can catch exceptions thrown by a Scala method eg: \@ throws(classOf[IOException]).

\section{Useful functions}
\subsection{Importing packages}
\begin{verbatim}
import java.util.{Date, Locale}
import java.text.DateFormat
import java.text.DateFormat._
\end{verbatim}

These could be java packages.

\subsection{User IO}
println, print, printf.

\subsection{File IO}
scala.io.Source has useful functions: getLines returns an iterator. fromFile creates a Source object with a given fileName, fromURL creates it from a URL.

\subsection{(De)Serializing}
Use scala.util.Marshal.load[Type] and dump.

\chapter{Perl}
\section{Distinctive features}
This is an interpreted language. It is loosely typed.

It is very good at text processing.

\subsection{Richness of syntax}
It is very rich, so that there are multiple ways to accomplish the same thing; to the point where code written by one programmer may be unintelligible to another.

\subsubsection{Enforcing discipline}
To enforce some discipline (Eg: forcing declaration of variables using 'my'), declarations like 'use strict; use warnings;' are added at the beginning of the program.

\section{Running, building}
\subsection{Running}
See perlrun on the internet. Commands to be interpreted are either entered in a special shell, or is passed in a file to the interpreter, or is passed in the command line.

\subsubsection{Passing commands in the command line}
perl -e 'cmd1' 'cmd2' executes those commands in order. The additional switch -n causes it to assume that the program to be executed is \verb'while(<>) {commands}'. That is, commands are exectuted for each line drawn from the input.

\subsection{Getting help}
Use perldoc, perlsyn. Inbuilt function reference: perlfunc.

\subsection{Install modules}
Can do: perl -MCPAN -e 'install modName' or just use cpanm moduleName command, which is installed with 'cpan App::cpanminus'. Or one can open cpan and use the install command there.

\section{Code structure}
sentences end with ;, unless it is the final statement in a block. A block is as in C.

Comment lines begin with \#. Multiline comments (pods) are enclosed between =word1 and =cut.

\subsection{Control statements}
\begin{itemize}
\item if (EXPR) BLOCK
\item if (EXPR) BLOCK else BLOCK
\item if (EXPR) BLOCK elsif (EXPR) BLOCK ... else BLOCK
\item unless EXPR BLOCK 
\end{itemize}

All of the above can be written in the form: 
COMMAND if/unless EXPR.

\subsection{Loops}
\begin{itemize}
\item while (EXPR) BLOCK
\item while (EXPR) BLOCK continue BLOCK
\item for (EXPR; EXPR; EXPR) BLOCK
\item foreach VAR (LIST) BLOCK
\item foreach VAR (LIST) BLOCK continue BLOCK
\item BLOCK continue BLOCK
\item until (EXPR) BLOCK
\end{itemize}

All of the above can be written in the form: 
COMMAND loopCmd EXPR.

\subsubsection{Skipping or redoing iterations}
Use the loop control statements "next", "last", and "redo". Each loop may be preceded by a LABEL, which is of the form xyz:; The LABEL identifies the loop referred to by the loop control statement.

\subsubsection{Continue block}
The continue block is executed even when 'next' is used. But, it is not executed when redo is used.

\subsection{goto}
goto LABEL can be used to even escape from subroutines!

\section{Variables and values}
Use the following: scalars: \$var  (a single string), arrays:  \@var, hashes:  \%var.

For example: \$varname = value;

The default value is undef.

\subsection{Integers}
Comparison operators are as in C.

\subsection{Array}
These may be mixed.

\subsubsection{Accessing elements}
Accessing kth element: arr[k]. arr[a..b] yields a sublist.

\$@arr yields the last element.

\subsubsection{Properties}
@arr, in appropriate contexts, yields array length.

\subsubsection{Common methods}
sort, reverse.

\subsubsection{Literals}
(item1, item2 ..).

\subsection{Hashmaps}
Literals are like arrays of item-pairs, which take the form \verb'key=>val'. Elements are accessed using \verb'var{key}'. Values may themselves be other hashmaps, in which case, the corresponding key is actually a scalar reference.

\subsubsection{Functions}
keys, values.

\subsection{Strings}
These are enclosed in " or '', may be multiline.

\subsubsection{Comparison}
eq ne lt gt =\~  (regular expression matching).

\subsubsection{Functions}
Common List methods operate on them. '.' is the concatenation operator.

Other string functions include strip, split etc..

Int(str) does integer parsing.

\subsection{Regular expressions}
These are specified using /exp/.

Replacement patterns are specified using s/exp1/exp2/. 'g' appended to the end of this string indicates that all occurrences should be replaced.

\subsection{References/ pointers}
One can create references to hashes. Eg: my \$ref = hashLiteral.

To get to an element in the object pointed to by the reference, one uses: \verb'ref->key'.

\subsection{Special variables}
Depending on the context, the interpreter makes available values using special variables. Eg: \$\_.

\section{Subroutines}
Many functions are inbuilt.

\subsection{Definition}
sub fnName;

\subsection{Invocation}
fn(args) or fn args.

\section{IO}
\subsection{Output}
Use print(). When passed a string, if the string is enclosed in ", variables in it are replaced with values.

\subsection{Opening and closing files}
\verb'open(OUTFILE, ">path")'. close(OUTFILE).

There is also opendir and closedir for directories with similar syntax.

\subsection{Reading files}
\verb'<FILE1>' reads lines from a file handle. Depending on the context in which it is used, it either returns a single line or multiple lines.

There is readdir(DIR) with similar functionality.

\subsection{Throwing errors}
cmd $||$ die strMsg;

\part{Mathematical programming}
\chapter{Fundamental concerns}
When doing mathematical computations - especially while using the floating point hardware representation, concerns dealing with overflow and underflow arise. These problems and various methods of dealing with them are described elsewhere.

\chapter{Special libraries}
\section{Linear algebra libraries}
\subsection{Tuning to fit memory, processor}
Matrix factorizations, matrix vector multiplications etc.. are tuned specially to the hardware, in order to achieve maximal speed-up. For example, they may break matrices up to fit the cache and combine the results.

\subsection{Dense linear algebra}
BLAS, LAPACK: fortran routines. clapack provides c interface to some lapack routines. atlas implements blas and some of lapack.

\subsection{Sparse linear algebra}
UMFPACK, SPOOLES. The standards for these computations is yet to be finalized, and it is an active area of engineering.

\chapter{Matlab/ Octave}
\section{Introduction}
\subsection{Distinctive features of the language}
Excellent plotting facilities; many libraries; interactive sessions good for exploring features of data; easy I/O: don't need to spend as much time in getting I/O right as in actual computation; excellent debugging facilities.

Octave is an open source clone of matlab.

\subsubsection{Purpose of design}
Matrix computations. This is meant to be a rapid prototyping language : It is not meant for fast implementations.

\subsubsection{Versions}
Certain OOP methods, properties don't work with 2007 version.

\subsection{Speed}
Matrix/ vector multiplications are implemented by calling efficient linear algebra implementations like LAPACK etc.. So, operations which can be specified using matrices/ vectors should never be specified using loops.

Also, certain functions like repmat, ones, sub2ind etc.. could be faster. Use packages like lightspeed which implement faster versions of these oft used functions.

\subsubsection{Speeding up loops}
When unavoidable, loops are known to be slow, even when efficient linear algebra routines are used internally. This is because of costs associated with interpreting each line of code in the loop at runtime.

\paragraph{Preallocate memory}
You can speed up loops by preallocating the memory used therein - that way matlab will not have to repeatedly allocate a new block of memory.

\paragraph{Use C}
Implementing the logic in C not only removes the overhead due to MATLAB interpretation; it also generally forces the programmer to be conscious of and avoid memory allocation overheads.

However, there is an additional cost involved in packaging arguments for use by the C function: So it is best not to call the same C function in a loop - rather it is better to code even the loop in C.

\paragraph{Make function logic inline}
This can avoid repeated memory allocation and overhead due to the function calling infrastructure and increase speed. BUT for unknown reasons, the reverse can be true sometimes!

\subsection{Using External libraries}
\subsubsection{Locating libraries}
Go to \url{http://www.mathworks.com/matlabcentral/}, \\ search, look under appropriate tags.

\subsubsection{Installing and using}
unzip package, add it to path: maybe can use addpath(genpath(dir)) to add subdirectories.


\subsection{Building and executing code}
Can write directly in matlab command window.

Or can write scripts (a sequence of commands in a file) or functions; Add directory to path; Use matlab to invoke.

\subsubsection{Useful options}
No GUI: matlab -nodesktop.

Command history: diary on. Others: addpath, savepath.

\subsubsection{Good IDE's}
Matlab.

\subsection{Debugging}
Can view matrices in tables, as an image etc..

Introducing break points: Use GUI or 'keyboard' can be inserted in the midst of any function. Then use dbquit or dbcont or dbstep or dbstack.

\subsubsection{Profiling code for bottlenecks}
profile on
myfun;
profile report

\subsection{Help}
help commandName.

For library documentation, see its docs.

\section{Constants and data types}
\subsection{Data types of constants}
Everything is an object. The most common object is an n-dimensional array.

boolean numbers are represented by 0 and 1.

str = 'stringValue': a character array.

\subsection{Important constants}
Inf, NaN.

isNaN(a).

\subsection{Arrays}
A = zeros(2,3,2,3) makes a 0 tensor of those dimensions.

\subsubsection{Matrix}
\begin{verbatim}
A = [2 1;
     1 8]
\end{verbatim}
; separates columns.

Block matrices: B = [A  A+32; A+48  A+16].

\subsubsection{Data generation functions}
$-14:0.2:14$: Produces vector of equispaced numbers in the interval.

\paragraph*{Basic constant arrays}
zeros, ones, trues, falses.

eye, speye.

\paragraph*{Random array generation}
randn, random, unifrnd.

\paragraph*{Sparse array generation}
spconvert(mat) returns sparse matrix with indices/ values specified in mat's columns. sparse().

\paragraph*{Generate random permutations}
randperm(4) may return [2 3 1 4].

\subsubsection{Array indexing}
Array indexing is used to access a subarray in an array.

\paragraph*{Indexing with scalars}
Array index starts at (1,1, ..). Shortcut for last element along any dimension: end. Eg: A(end, 5).

\paragraph*{Indexing with index-vectors}
Entire row or col of an array can be selected using : symbol: A(:,3).

\paragraph*{Indexing with one scalar}
Aka linear indexing

A(5) or A(v) are also meaning-ful, especially straight-forward for vector A.

\paragraph*{Indexing with logical vector}
Eg: $A(A>12)$.

\paragraph*{Indexing tricks}
Indexing upper triangular portion of a matrix: create indices using triu(ones(m, n)).

\subsection{Cell array}
A = cell(m, n); creates a cell array of pointers (cells), usually pointing to matrices.

\subsubsection{Cell elements: indexing, altering}
A\{i, j\}: returns the contents of the appropriate cell in the array, whereas A(i, j) returns a cell (pointer).

Delete element from cell array: $cell(i) = []$.


\subsubsection{Cell values}
\{23 34\} creates a 1*2 cell array.

\subsection{Data-type conversion}
Use logical(), num2str(number, precision).

\subsection{Structures}
\subsubsection{struct}
s = struct('field1', values1, 'field2', values2, ...). isstruct.

isfield(s, 'fieldx'). rmfield. 

get and put are abbreviated by syntax like s.field1. 

\paragraph*{Dimensions/ size of struct}
The size of the resulting structure is the same size as the value cell arrays or 1-by-1 if none of the values is a cell.

\subsubsection{Use Java objects}
\begin{verbatim}
mtype = java.util.Hashtable;
mtype.put ( 'numNodes', numNodes);
s = mtype.get('numNodes');
\end{verbatim}

Note: Java heap space runs out of memory much more easily.

\paragraph*{Checking emptyness}
mtype.get('asdf') returns [].

\subsection{Function handles}
Suppose fn f defined already. Then can use g = @f, can pass it to other fns just like variables.

\subsubsection{Reparametrization}
Can reparametrize functions while you are at it. Eg: If poly(x, b, c) is defined and b, c are specified, can use @(x)poly(x, b, c) to get a handle to a function with parameter x.

\subsubsection{Anonymous functions}
Can also create anonymous fn using an expression; Eg: $f = @(x)x^3+x$.

\subsubsection{Clearing memory}
clear varName;

\subsection{Objects}
\subsubsection{Object creation}
c= ClassName(..)

\subsubsection{Access/ manipulate objects}
Use object.member.

\paragraph*{Introspection methods}
properties(obj) or fieldnames(obj) \\
lists public properties; methods(obj) lists public methods. class(obj).


\section{Memory, variable management}
List variables in use: whos.

\subsection{Clearing, recompiling}
clear classes; rehash pathreset;. Need to do this if you alter class signature.

\section{Data manipulation}
\subsection{Operators}
\subsubsection{Unary}
transpose\', minus -.

\subsubsection{Boolean valued operators}
\begin{verbatim}
 <  >  <=  >=  == ~=
\end{verbatim}

\subsubsection{Boolean operations on matrices}
Boolean ops also work with matrices to make boolean matrices.

all(A) checks if $\forall i,j A_{i,j} \neq 0$.

\subsubsection{Arithmatic operators}
* + -

\subsubsection{Multi-ary}
Range specifiers: 1:5 1:2:5.

\subsubsection{Component-wise operations}
\begin{verbatim}
y = sin(x)./x;
\end{verbatim}

\subsubsection{Matrix operators}
\verb A/B : roughly $AB^{-1}$.

\verb A\B : roughly $A^{-1}B$.

\subsection{Operation with constant arrays: shortcuts}
In A + 1: 1 is evaluated as a matrix of 1's.

\subsection{Array processing functions}
\subsubsection{Array statistics}
size, numel.

sum (along any dimension: 1 for sum along rows/ sum of columns, 2 for sum along columns/ row sum etc..).

max, min.

nz, norm, unique.

find: find non-0 elements of matrix.

\paragraph*{Checking emptiness}
use isEmpty().

\subsubsection{Reshape array}
Delete row: A(2, :) = [].

If you store a value in an element outside of the array, the size increases to accommodate the newcomer.

Alter array shape: reshape.

\subsubsection{Alter matrix}
normr/c, tril, triu.

\subsection{Vector processing functions}
Vector statistics: histc().

dot(a, b) gets the dot product of a and b without having to worry about whether a and b are both column vectors in doing a'b.

\subsubsection{String manipulation}
c=['sdf' 'asdf'] or strcat() concatenates.

[firstToken reminder] = strtok(string, delimiters).

strrep : string replacement.

\subsection{Matrix functionals}
\subsubsection{svd and eig}
svd, svds (get only a few $\sw_i$), eig, eigs.

eig and eigs can return vectors differing in signs. \why

\paragraph*{Low rank approximations of symmetric A}
If A is symmetric, eigs is faster than doing svds, as it probably constructs $B = \mat{0 & A\\ A^{T} & 0}$ to compute svd. Can pass options which specify the structure of A (eg: symmetry), so that ew decomposition can be computed faster. Actually, $\abs(\ew) = \sw$, but if ew's are close together, $\ew$ and $\sw$ returned by eigs and svds can be very different --- but the resulting low rank approximations are both equally good.

\section{Code structure}
\subsection{Sentence syntax}
Sentence ends with ';' or new line: if former, execution is silent. Can continue writing in next sentence with '...'.

\subsubsection{Commenting}
\% comment.

\subsection{Functions and commands}
\subsubsection{Commands}
Commands usually don't take vlaues/ variables, assume everything is a string etc..

Functions can be nested.

\subsubsection{Functions without side-effects}
Matlab functions are almost functions in the mathmatical sense: accept values and variables as arguments, return value. If they modify an object passed in the argument, they *must* return the object.

\subsubsection{Syntax of function defn}
\begin{verbatim}
function outputValue = fnName(arg1, arg2)
%  fnName(x,y)  function documentation
end

\end{verbatim}

arg1 could be a function handle: you can then use arg1(..) to invoke the corresponding function.

To return multiple values, use function [a, b] = fnName(..).

To invoke functions from outside the file, they should be public: they should have same name as the file. Else, ye have a private function. Can't declare a fn inside a script.

\subsubsection{Anonymous / temporary functions}
\begin{lstlisting}
f = inline('sqrt(x.^2+y.^2)','x','y');
f = @(x, y)sqrt(x.^2+y.^2);
\end{lstlisting}

Reparametrization is another way of defining temporary functions: this is described under the function handles section.

\subsubsection{Nested functions}
\paragraph{Definition}
Functions can be nested - by defining them as usual within a function body. But they cannot be nested within control structures.

\paragraph{Variable scope}
They can access and modify variables and utilize functions, if they are defined within functions defined at a higher level.

Variables defined within a nested function are not available outside.

\paragraph{Restrictions on modifying runtime workspace}
While debugging, if you break execution in a function in which a nested function is defined, you cannot modify the workspace by defining new variables. But you can define 'global' variables to get around this.

\subsubsection{Checking input and output structure}
Behaviour of a function can be made to vary based on the number of output variables expected by the caller, and the number of input variables required.

\paragraph*{Variable inputs}
Use nargin to check number of arguments passed. Or, you can use structures to pass arguments.

\paragraph*{Variable outputs}
Use nargout to check the number of output arguments expected. Then, add variable number of outputs like this: varargout(1) = {op1}; varargout(2) = {op2}; .

\subsubsection{Invocation}
\paragraph*{Invocation of functions}
output = functionName(arg1, arg2);\\
\verb'[m, n] = size(X)'. Strings must be enclosed with ''.

Usually, reference is passed. Only the field being modified by the function will be passed 'by value'. If modified structure is returned as output, only changed fields will be altered upon function-return.

\subparagraph*{Asking functions for fewer outputs}
A function can return variable number (upto n) of outputs. But, when you invoke the function asking for k outputs, you cannot predict whether you get the first k of the n outputs or some other set - that is up to the function definition. Eg: qr().

\subparagraph*{To ignore return value}
\verb'[~, n] = size(X)'.


\paragraph*{Invocation of commands}
commandName arg1 arg2 . Arguments assumed to be strings: even if not enclosed by ''.

\paragraph*{Invocation of methods}
Call superclass method: methodName@super(obj);

\paragraph*{Invocation over multiple elements}
cellfun(fun, cell), arrfun(fun, array).

\subsection{Define classes, packages}
Base classes: value, handle.

\begin{verbatim}
classdef ClassName < package.superClass1 & superClass2
 properties (Access = ..)
  ...
 end
 methods
  % Constructor
  function s = ClassName(..)
   s = s@package.superClass1(...)
   s = s@superClass2(...)
  end
  function delete(objRef)
  ...
  end
 end
 events
  EventName
 end
end
\end{verbatim}

In all non-static methods, the first arg is the object itself. object.fn(a, b) $\equiv$ fn(object, a, b).

No overloading functions within the same class.

If function modifies the object, it must return the object, like any fn in the mathematical sense!

\subsubsection{Modifiers}
Property modifiers: setAccess, getAccess = protected/ private/ public, Constant (not available in 2007 version), Static. Method modifiers: Access, Abstract = true, Static.

Property access methods: called when ye get or set property, before setting/ getting:
\begin{verbatim}
function value = get.PropertyName(object)
...
end
\end{verbatim}

\subsubsection{Directory structure}
Under a directory in the path, +packageName dir, @ClassName dir or ClassName.m file. If a @ClassName folder is used, then ClassName.m containing the class definition should be placed within that folder.

\paragraph*{mex files}
Packages can contain mex files: \\
invocation: packageName.functionName.

\subsubsection{Ceveat about 2007 version}
The modifier syntax (Static) can't be used in 2007 version: must use (Static = true): does not even give error message.

Bad error messages.

\subsubsection{Check errors in definition}
Try to construct an object or Use fieldnames on an object, or invoke a test method.

\subsubsection{Specifying events}
Make a subclass of handle. Broadcast event using notify(obj,'EventName').

Listen for events: addlistener(eventObj,'EventName',@myCallback).

\subsection{Branching structures}
\begin{verbatim}
if n == 0
    T = t0;
elseif n == 1;
    T = t1;
else
    T = 3;
end

switch x
case {1,2}
disp('Probability = 20%');
case {3,4,5}
disp('Probability = 30%');
otherwise
disp('Probability = 50%');
end
\end{verbatim}

\subsection{Loop structures}
\begin{verbatim}
for k= (Any *row* vector like 2:n)
  T = [2*t1 0] - [0 0 t0];
  t0 = t1;
  t1 = T;
end

while booleanCondition
  statements;
end
\end{verbatim}

\subsubsection{break and continue}
Can break out of a loop or skip an iteration.

\subsubsection{Avoiding loops in place of matrix ops}
For efficient implementation, whenever matlab does large matrix operations, matlab uses PROPAC and other specially designed libraries to do things efficiently. So, if matlab has a matrix operation, always use that rather than writing your own loop.

\subsection{Error handling}
\subsubsection{Throwing errors}
\begin{verbatim}
ME = MException('component:mnemonic', ...
       'message');
throw(ME)
\end{verbatim}


\subsubsection{Throwing warnings}
Use warning('msg') or warndlg(). These are displayed when you do warning('on').

\subsubsection{Assertions about input}
assert(condition, errorMessage) generates an exception with an error message if a condition is violated. This is useful.


\section{Visualization}
\subsection{Creating a figure}
figureHandle = figure() creates a figure.

Can later save this: saveas (figureHandle, name With Extension).

gcf returns handle to the current figure.

figureHandle = hgload(figure path) or open() loads a figure.

\paragraph*{Set properties}
colormap gray;


\subsection{Plotting data}
The plotting functions accept suitable data, figure properties, return a figure handle.

subplot(m,n,p) breaks up the figure into m*n table, selects the pth cell for the current plot.

hist(vector, nbins) without output arguments. bar(vector).

plot (xAxis, yAxis, LineSpec, 'PropertyName', value, ...);

semilogy plots y axis in log scale.

\subsubsection{Line specifications}
It is composed of the following, in that order. Eg: '-+r'

Line styles: -, --, -., : .

Markers: + o * . x s d p h \^ v .

Colors: r g b c m y k g.


\subsection{Plot properties}
xlabel, ylabel, title.

grid on/ off/ minor.

\subsection{Visualize matrix}
\subsection{Visualize matrices}
spy a sparse matrix, for use with full matrices (aka non-sparse) use $>0.0001$. imagesc(A), image(A).

\section{Prallel programming}
\subsection{Multi-threaded programming}
Automatically enabled after 2008. Can be enabled with maxNumCompThreads = 2. Makes large matrix operations faster.

\subsection{With matlab toolbox}
Tightly integrated with many other mathworks toolboxes.

\subsubsection{Processor pool}
Worker processes can be enable on a cluster or on the local multicore machine : controlled by a distributed computing server.

Use: matlabpool open/ close/ size.

\subsubsection{parfor loop}
Operates like for loop, but there may be no variable dependency between loops - otherwise the program will fail to compile.

\subsubsection{Other tools}
Look in matlabcentral.

\section{System IO}
Use: [returnValue, commandOutput] = system(commandName);

To get environment variables: env(variableName).

\section{Other library functions}
Very rich in functions for matrix operations. Try to find pre-written functions before writing code from scratch.

\subsection{Useful external toolboxes/ packages}
software from Kevin Murphy and collaborators. Minka's lightspeed.

\subsection{Solving Matrix problems}
\verb A\b  solves system of equations Ax=b. lsqnonneg: Non negative least squares.

Fitting polynomials to x and y: polyfit.

\subsection{File I/O}
\subsubsection{Log files}
Can use file = fopen(fileName, mode); Mode can be w for overwrite, a for append ...
fprintf(file, 'asdf');
fclose(file).

\subsubsection{Loading formatted data}
\begin{verbatim}
load someFile.mat;
save data.mat A1; 
\end{verbatim}
load can read ascii files with two space separated columns and make sense of it.


\subsubsection{C like functions}
fprintf, \verb'fscanf(fid,"%d ...")', fopen(fid, 'w'), fclose.

\subsection{User interaction I/O}
To print stuff: disp(). pause().

format long : set extra accuracy.

\subsection{Solve general optimization problem}
Described among optimization software.

\subsection{Algebra}
\begin{verbatim}
symadd('x^2 + 2*x + 3','3*x+5')
\end{verbatim}

\subsection{Measure time}
tic toc.

\section{mex: Using C functions}
Write c files for efficiency. 

\subsection{Interface}
\begin{verbatim}
#include "mex.h"
void mexFunction(int numOutputArrays, mxArray *pOutput[],
int numInputArrays, const mxArray *pInput[])
 ...
\end{verbatim}

Compile them in matlab prompt: mex fileName.

\subsubsection{Debugging}
See tips online.

\subsection{mxarray datatype}
This includes the array's type, matlab variable name, dimensions. Non-sparse arrays contain pr and pi to store the real and imaginary parts of the data: these are one dimensional arrays.

\subsubsection{Creation}
Use functions like: mxCreateNumericArray, mxCreateCellArray, mxCreateCharArray.

\begin{verbatim}
 mxArray *myarray = mxCreateNumericArray(..);
 mxCreateDoubleMatrix(1,3,mxREAL);
\end{verbatim}

\subsubsection{Array access}
mxGetPr, mxGetPi, mxGetData, mxGetCell.

mxGetM, mxGetN: get matrix dimensions. 

\subsubsection{Array modification}
mxSetPr, mxSetPi, mxSetData, mxSetField. Can use memcpy to copy arrays at one shot.

\subsubsection{Memory management}
mxMalloc, mxCalloc, mxFree, mexMakeMemoryPersistent, mexAtExit, mxDestroyArray, memcpy

\subsection{Executing matlab commands}
Both mexCallMATLAB and mexEvalString execute MATLAB commands. Use mexCallMATLAB for returning results (left-hand side arguments) back to the MEX-file. The mexEvalString function cannot return values to the MEX-file.

\subsection{User IO}
mexPrintf, mexWarnMsgTxt, mexErrMsgTxt.

\subsection{Input validation}
mxIsChar, mxIsClass(prhs[0], "sparse"), mxIsComplex.

\section{Java}
\subsection{Advantages}
Using loop operations can be 2x faster in java. For matrix operations, the fortran routines used by matlab are faster; but using java libraries like colt is said to be not too much worse.

Also, Arrays and values are automatically converted between matlab and java formats.


\subsection{Classpath}
javaclasspath shows static and dynamic portions of class path. The former is loaded from [matlabroot \verb '\toolbox\local\classpath.txt' ]
. The latter is set using javaclasspath or javaaddpath. The class path is refreshed using [clear java].

\chapter{Optimization software}
\section{cvx}
\subsection{Distinctive features}
\subsubsection{Disciplined convex programming framework}
Makes specification easy. Abstracts away the mathematical and methodological details (like what underlying solver to call?).

Tries to mimic the way people formulate convex programs: drawing from a library of convex functions, combining them in various valid ways to preserve convexity. Similarly, it has a rich, expandable library of functions with known properties, plus it specifies valid ways of composing and combining them.

Good way to check convexity of the problem!

\subsubsection{Defects}
A generic solver. Not suitable for large problems.

\subsubsection{Other features}
It is closely integrated with matlab.

Possible to specify the underlying solver used.

\subsection{Help}
See cvx manual on website, many examples, quickstart file.

\subsection{Specification structure}
\begin{lstlisting}
cvx_begin
    variable p(numParams);
    minimize norm(A*p - ones(numRows,1), Inf);
    [[or minimize(a + b), not minimize a + b]]
    subject to
    p >= 0;
    p <= 1;
cvx_end

Other modes:
cvx_begin sdp : interprets matrix inequalities as conic.
cvx_begin gp
\end{lstlisting}

All constraints and optimization function for minimization should be convex - else, cvx will reject the problem and try to provide a helpful message trying to explain the reason for the rejection.

\subsubsection{Matrix variables and constraints}
Multiple constants/ variables are specified using matrices.

\begin{verbatim}
Matrix variables: 
variable X(n, n) symmetric;

Semidefiniteness constraints:
X == semidefinite(n);
\end{verbatim}

\subsection{Error reporting and dimensions}
To stop verbosity: \verb cvx_quiet(true) .

\subsubsection{Scalars and 1*1 matrix}
If you try to add a scalar and a 1*1 matrix lke $a^{T}b$, cvx fails with a cryptic error message.


\paragraph*{Assuming dimensions of variables automatically}
If you declare variable b intending for it to be a scalar; but then try to add it to a vector in the constraints, cvx does not report an error.

\subsection{Solution, program variable}
\subsubsection{Datatype of the program variable}
The program variable is different from matlab variables. While the optimization is underway, p is a cvx object. After optimization is done, p is the optimal solution - just a normal matlab variable.

\subsubsection{Solution variables}
opt\_val, tolerance etc..


\section{Matlab optimization toolbox}
Built into matlab.

\subsection{Unconstrained minimization}
\subsubsection{fminsearch}
Solves unconstrained optimization problem, where objective is assumed to be continuous. fminsearch can often handle discontinuity, particularly if it does not occur near the solution.

fminsearch uses the simplex search method. This is a direct search method that does not use numerical or analytic gradients as in fminunc.

\subsubsection{fminunc}
fminunc does the same thing, except it cannot handle discontinuities. \chk

\subsection{fmincon}
Finds a local minimum of a constrained nonlinear multivariable continuous function. Solves $\min f(x): c(x) \leq 0; c_{nl}(x) \leq 0; Ax \leq b; A'x = b'; l \leq x \leq u$.

It uses finite difference approximation of the gradient when the gradient is not available.

\begin{lstlisting}
[x,fval,exitflag,output,lambda,grad,hessian] = fmincon(fun,x0,A,b,Aeq,beq,lb,ub,nonlcon,options,P1,P2, ...)
\end{lstlisting}

Parameters to ignore can be specified by passing [].

\subsection{Other functions}
fminbnd : minimizes $f:R \to R$.

\subsection{Options}
A structure with options.

\begin{lstlisting}
options = optimset('Display','iter','TolFun',1e-2);
options = optimset(options,'TolX',1e-2);
\end{lstlisting}


\chapter{R}
\section{Introduction and use}
Statistics is the emphasis, not matrix manipulation. It is an expression language.

\subsection{Writing, Building and executing code}
\subsubsection{Script execution}
source("/path/file.R").

\subsubsection{Reloading changed code}
library("R.utils");

sourceDirectory("work", modifiedOnly=TRUE, \\pattern="[A-Z]*[.]R\$", recursive=FALSE);

\subsubsection{Important environment variables}
\verb R_LIBS : the place where R libraries are installed.

\subsubsection{Working environment}
getwd(), setwd(dir)

options(): Example options(digits=3)

\subsubsection{Command history}
history(), savehistory, loadhistory.

Can use Ctrl+R as  in BASH.

\subsubsection{Good IDE's}
\paragraph*{Native GUI}
Graphical data entry: data.entry(x), edit(x).

\subsection{Debugging}
The following can be inserted in the midst of code: 

browser(): breaks execution and allows debugging with arbitrary code: like keyboard in matlab. Use cont to continue the program. Q halts execution.

debug(): marks function for debugging.

trace() function modifies a function to allow debug code to be temporarily inserted.

setBreakpoint("fun.R\#20")

traceback() is useful when error is encountered.

\subsection{Help}
help(command), ?command, \\
apropos("log"), help.search("log"), example(commandName).

\subsection{libraries}
\subsubsection{Seeking}
help.search(fnName);

\subsubsection{Using}

\subsubsection{Installing}
Many packages are listed in cran internet repository.

install.packages("igraph"). For usage, see the packages subsection.

\section{Data: types, values, variables}
\subsection{Names}
\subsubsection{Valid names}
a.b and a\_b are valid name; but by doing so, you are not creating a structure named a. A name can start with '.', but if so it cannot be followed by a digit.

\subsubsection{Namespace}
Uses: avoid name conflicts, structure code well.

To call a function b in a namespace a, use: a::b(). If b is hidden, then use a:::b().

\subsubsection{Listing and memory}
objects() lists objects.

rm(objA, objB) removes certain objects from memory. rm(list=ls()) removes all objects.


exists() checks for the existance of an object.

\subsubsection{Accessing list members directly}
Use attach(Lst). detach() reverses this.

\subsection{Object}
Everything is actually an object with attributes.

\subsubsection{Important attributes}
mode: details about the type of data contained.

length.

\paragraph{class}
Important ones are numberic, character, Date.

\subsubsection{Generic functions}
attr(object, attribute) is used to get or set an attribute.

\subsubsection{Data conversion}
as.array() etc.. Use methods(as) for a list of such methods.

\subsubsection{Assignment}
$<-, ->$, assign(). $<<-$ is used to make global assignments: assignment to a variable outside the local scope.

\subsection{Modes}
\subsubsection{Basic modes}
Boolean. Numeric. Integer.

\subsection{Scalar values and operations}
\subsubsection{Special values}
TRUE, FALSE. Inf. NA: 'not available' or missing values. NaN is also a special case of NA.

These can be checked using is.na() and isNaN functions.

\subsubsection{Arithmatic operators}
As in C.

\subsubsection{Operators on booleans}
\verb'|, &, ||, &&',  where the latter result in 'short-circuit' evaluation, where the second argument is evaluated only if necessary.

\subsubsection{Operators which produce booleans}
\verb'>, <, =='.

\subsection{Vectors}
\subsubsection{The basic math object}
A scalar is actually a vector with one element in R. An array is also internally a vector. A string is a character array.

\subsubsection{Homegeneity}
Vectors are homogenous: their 'mode' attribute is character, numeric, logical.

\subsubsection{Named entries}
names(x) = stringList is a way of giving names to indices.

\subsubsection{Indexing}
A vector can be indexed with a vector of a] logical elements, b] positive integers, c] negative integers.

Eg: x[1:10] picks 1st 10 elements. x[-2]: all but x[2].

x['abc'] is valid if entries are named.

tail(x, k) picks the k last elements.

\subsubsection{Creating vectors}
c(1,2) : combine fn.

seq(); This can be abbreviated using the : operator.

rep(vector, timesToRepeat) is the replicator function.

vector() creates an empty vector.

\subsubsection{Arithmetic and boolean ops}
All scalar arithmetic operators are extended to be meaningful when provided vector arguments: even when they are not of the same size.

\paragraph{Lengthening}
All shorter arguments are extended by repetition to have the size of the longest vector: Thus 1+c(2 3) is define.

\paragraph{Examples}
c(1,2,3,4)/c(4,3,2,1). c(1,2,3,4) + c(4,3) yields 5 5 5 8.

\subsubsection{ifelse op}
ifelse operation uses a logical vector as a condition.

\subsubsection{Vector statistics functions}
length, max, min, sum, mean, median, cummax, cummin, cumsum, cumprod, range, prod. cor: correlation.

which: gather 'TRUE' values from boolean vector.

\subsubsection{Apply scalar functions}
lapply.

\subsubsection{Strings}
These are character vectors. Enclosed in "" for brevity.


\paragraph{String manipulation}
concatenation: paste(vector). substr gets a substring.

\subsubsection{Dates}
\paragraph{String connection}
\verb'd<-as.Date("1995/12/01",format="%Y/%m/%d")' converts string to date. 

format(dt) converts date to string.

\paragraph{Arithmetic operations}
Then, one can add days with d+20.

\subsection{Arrays}
\subsubsection{As special vectors}
Arrays are just vectors which support multiple subscript indexing. So all operations and restrictions that apply to vectors apply to arrays.

Arrays are stored column by column.

The dimensionality is stored as a vector in the dim attribute.

\subsubsection{Indexing}
A[a, ...]. Any subscript can be replaced with the sort of vector used to index vectors. If a subscript is omitted all values in that dimension are chosen.

Eg: A[,c(3:5)]: picks 3 cols.

\subsubsection{Data creation}
array(vector, dimensions). Or just set the dim attribute after creating a vector.

\paragraph{Matrices}
x = matrix(vector, nrow = 3).
matrix(0,nrow=n,ncol=n)
 
Row or column binding functions: rbind(vec1, vec2); cbind.

\subsubsection{Array functions}
apply applies funcions to margins of an array; apply(x,1,max): gives row max.

\subsubsection{Matrix functions}
diag(A) extracts diagonal, creates a diagonal matrix depending on the argument. t(A): transpose.\\
\%*\%, \%\^\%: matrix mult and exp.

sum, rowSums, colSums, rowMeans, colMeans. cor: correlation.

\paragraph{Linear algebra}
eigen, svd, qr. solve(A, b). lsfit(A, b).

\subsection{Lists}
Lists are heterogenous. They are a combination of a Hashmap and a list. They are very convenient to use as structures.

\subsubsection{List creation}
$L <-list(1, a, b)$ or $L <-list(a1= 1, a2 = a, xyz = b)$ for named lists.

\subsubsection{Accessing list items}
L[[4]], L[["fieldName"]], L\$fieldName. While indexing, list names can be abbreviated: Eg: 'cov' instead of 'covar', as long as the interpreter is still able to uniquely identify the intended member.

TO see if a member exists, use: fieldName \%in\% colnames(Lst).

\subsubsection{Concatenation}
c(L1, L2) returns a single list with members from both.

\subsection{Data frame}
This is a convenient way to store a table (possibly with column headers).

\subsubsection{Creation}
They are often read in from files - using read.csv for example.

By concatenating vectors: df = data.frame(n, s, b).

\subsubsection{Conversion}
Or from a matrix: data.frame(A). It can be reconverted to a matrix using data.matrix.

\subsubsection{Indexing}
Indexing is done as in the case of two dimensional arrays. If column headers exist, they can be used for indexing.

\subsubsection{Searching}
\verb which(sbux.df$Date == "3/1/1994") 

\subsubsection{Concatenation}
As in the case of matrices

\subsection{Model Formulae}
\~ operator is used to separate left and right sides of formulae.

Syntax: response \~ predictor variables.

\subsection{Functions}
Functions are actually objects.

\subsubsection{Definition}
\begin{verbatim}
my.mean <- function(x1 = defaultValue, y1) codeBlock
\end{verbatim}

The value returned is the value evaluated by the last expression in the function definition. Multiple return values are usually handled using lists.

\subsubsection{Variables used}
Usually variables have a local scope: they cannot be accessed outside a function.

They can use variables from the parent scope, say g. The value of g is bound from the parent scope. If a normal assignment is made to g: $g <- 0$, g is then taken to refer a local variable. If g is not bound to a value, but is required in the function definition, there is an error; as it is not bound either in the definition or by an argument. However, if $g <<- 0$ is used, then the parent-scope variable is updated, and g acts as the 'state' of the function. 

\subsubsection{Operator defintions}
The function name can be replaced by \%*\% for example.

\subsubsection{Invocation}
Invocation can be done as in C, using a sequence of values. Together with positionally specified values, one can pass named arguments in any order. Eg: f(3, a=1, b = 2) or f(a=1).

\section{Code structure}
Every line of code is an expression or a sentence.

\subsection{Code blocks}
\{\} encloses code block.

Sentences end with newline or ;.

\subsubsection{Commenting}
\# comments.

\subsection{Decision structures}
if(..) codeBlock; optionally followed by else codeBlock. for(var in vector) codeBlock. while(cond) codeBlock.

\subsection{Packages}
To be able to use a package, one says: library(packageName). Standard packages are automatically available. Note that this is distinct from the idea of a namespace.

\subsection{Other organization tricks}
Can group functions in lists which are declared in separate files. These files are then (re)loaded using commands like source or sourceDirectory.

\section{IO}
\subsection{File I/O}
To load data from a table, use read.table(), read.csv (fileName, header=FALSE, stringsAsFactors = FALSE), write.csv(x, file).

Write in matlab format: library(R.matlab), writeMat(filename, A=mat).

\subsection{User interaction I/O}
\subsubsection{output}
a+b prints a value, which is then lost.

print. printf is available in the base package.

sink('fileName') diverts output to a file. sink() restores it to STDIO.

\subsubsection{Input}
x= scan(): keyboard input, no commas.

\subsection{Plotting and tables}
\verb' plot(y ~ x) ' produces a scatter plot.

Tables can be produced with \verb'xtabs(y ~ x)'.

\section{Other library functions}
\subsection{Random sampling}
Sampling from distributions: runif. sample(x, size, [replace=TRUE])

\section{Write C extensions}
\subsection{Write C code}
Useful libraries: \#include <R.h> \#include <Rmath.h>

Signature: void getSamples(int *input, int *output)

\subsection{Calling C code}
Compile C code: R CMD SHLIB foo.c

Loading: dyn.load("foo.so")

Calling: .C("foo", n=as.integer(5), x=as.double(rnorm(5)))

This returns a list of return.

\part{Shell Scripting and OS work}
\chapter{General tasks}
\section{Web Browsers}
Many popular browsers enable one to synchronize the following across different computers: bookmarks, stored user information and passwords.

google-chrome is a fast browser - it benefits from Google's heavy efforts at making browsing fast. One can configure keywords to map to search engines - this makes searching easy. It has problems rendering hyperlinked indic text -esp dEvanAgarI- properly.

\subsection{Extensions/ plugins}
Firefox has the advantage of having many users and many nifty plugins: including ones to download embedded movies/ media (flash and others) easily. 

\subsection{User scripting}
\subsubsection{Interoperability}
firefox, chrome, and IE all support user-scripting. The trend became popular with Greasemonkey scripts in firefox. Firefox user-scripts are managed using the greasemonkey extension, while similar extensions are available for chrome - but I haven't been able to make them work.

There are libraries which take browser differences into account.

\section{Scanning documents with camera}
\subsection{Cropping}
The image may need to be cropped to the interesting region.

\subsection{Enhancement}
When the camera captures the image of a document, because of inadequate light, there is a shift in the white-content of  colors captured - eg: white becomes a shade of grey. So, processing the camera picture to increase brightness and contrast of the image (aka Enhancing) is required. This ensures that, when reprinted, the colors appear closer to the original - ie they are not darkened.

\subsection{Compression}
For efficient storage and transmission, the image may need to be compressed.

The color range and image size may be reduced. 65\% quality JPEG compression is usually adequate.

\section{File synchronization}
Dropbox service syncs files across computers; but it does not preserve deleted files for more than a month.

\section{VOIP}
Skype, google chat.

\chapter{Pocket computer OS usage}
\section{Podcasts}
Mediafly is a good podcast listening service - one can store list of channels/ podcasts online; one can arrange to preload them when access to WiFi is  available.

\section{Scanning}
Genius scan uses camera and does necessary post-processing to increase image brightness and contrast.

\chapter{Linux OS}
Map tasks and commands. 

\section{Command line basics}
\subsection{Find help}
Use man.

\subsection{Command invocation}
General syntax 'cmdName argList'. argList is often of the form -p argValue or --parName argValue.

\subsubsection{Inline execution}
If argList contains a component `cmd2`, then cmd2 is executed first and its output is passed to cmdName as argument.

\exclaim{This is a very important trick.}

\subsection{File streams available}
\subsubsection{Standard input, output and error}
Every program run from the command line has access to at least 3 file streams: stdin, stdout, stderr. The first is opened in a purely READ mode, while the others are opened in a pure WRITE mode.

\subsubsection{Other files}
In addition, they may use various other files for input, output and configuration. Locations of configuration files are often implicitly assumed by the program to be a certain file in /etc/ or in a certain subdirectory of the home directory.

\subsection{Redirecting output}
The pipe, as in \verb cmd1|cmd2  redirects the standard output of cmd1 to the standard input of cmd2.

\verb'cmd 1>file1 2>file2' redirects stdout and stderr to particular files. \chk

\verb'tee outfile' prints content it receives via STDIN to STDOUT while recording a copy in outfile.

\subsubsection{To commandline arguments}
\verb'xargs -i cmdStr {}' executes \verb'cmdStr line' for each line in its STDIN.

\verb'for fl in `cmd2`; do cmd3 $fl; done' is also used for similar purposes.

Output is often piped to it from commands which find files like ls, find, locate.

\subsubsection{Importance}
The expressiveness of Unix shells in allowing composition of various nifty commands allows us to accomplish complicated tasks quickly.

\subsubsection{Display programs}
more, head, tail display select portions of the output.

\subsection{Filter programs}
These are programs which process data from STDIN, process it and print results to STDOUT. Thus, they are very useful as components in doing common modifications to the output of a given command.

sort sorts. grep pattern1 can be used as a filter.

\subsubsection{Replacement}
sed and the later awk are more powerful. Syntax: sed -e expr. Regular expression syntax is as in perl.

To replace a few lines, one does: \verb|awk 'NR>12 {print}' fileName|

\subsubsection{perl}
Running perl from the command line is a very popular option. Various switches are described in \htext{perlrun}{http://perldoc.perl.org/perlrun.html}.

-e expr executes expressions provided.

-n ensures that the expression runs on each line from file specified either in the command line or passed in stdin.

-p Same as -n, except output of each line is printed.

-a ensures that each line is automatically split to produce a token array (whose name may be arbitrary).

\subsubsection{Uniqueness}
Output can be piped to sort, and then to uniq -c to get unique entries.

\section{File management}
firefox browser.

mc, vi, head, tail, cat.

\subsection{Find and manipulate files}
locate fileName. find . -name '*.c' -print.

\verb_ls -d *.php | sed 's/\(.*\).php$/mv "&" "\1.mp3"/' | sh_

gunzip, tar -zxvf file.tar.gz.

\subsection{Find text}
\verb'grep -Ri --include=*.tex "some_string" some_directory'

\verb'find /www_root -name "*.php"'

\verb'|xargs perl -w -i -p -e "s/str1/str2/g"'

\subsection{Redirecting to stdout}
cat file1 does this.

\subsubsection{Table processing}
cut -f 4 selects the 4th field.

\subsection{Editors}
Useful features include: copying/ pasting, automatic indentation, ability to easily (un)comment, brackets which auto-close.


\begin{itemize}
\item general: kate.
\item bib editor: jabref.
\item html editor: bluefish, kompozer.
\item latex editor: kile. texmaker for indic script.
\end{itemize}

\subsection{Programmatic editing}
text replacement with regular expressions in vi: use \^C\^M for new line.

One can use perl -ipe cmd.

\section{Process management}
ps -A, top, (p)kill -9. This is useful in identifying crashing programs due to memory leaks.

In case of unresponsiveness, restarting the X (ctrl alt backspace) or the computer helps.

\subsection{Find hardware info}
cpuinfo, cat /proc/meminfo.

\section{Image processing}
Gimp, the gnome image viewer and editor.

\section{Installation}
Add a repository using the commandline or synaptic UI. Import necessary keys. update repository lists. Then install anything.

\chapter{BASH}
A scripting language, for a certain shell.

\section{Writing and executing code}
Begin with: \#!/usr/bin/env bash

\subsection{Environment variables}
env lists the environment variables.

\verb LD_LIBRARY_PATH , PATH.

export VAR=value sets an environment variable. To set these at startup, edit 

\section{Variable and data types}
\subsection{Declaration syntax}
Dynamic typing. Use \verb VARNAME=value for declaration. \verb $VAR_NAME  is a reference to the variable.

\section{Data manipulation}
\subsection{Comparison operators}
String comparison: \verb:[ "$1" == "$2" ]:

\subsection{String construction}
\verb:"$stringA$stringB": or 'asd\$f'. The latter form does not treat \$f as a reference to a variable.

\section{Control structures}
\subsection{Conditionals}
if condition then statements fi.

\subsection{Looping}
\verb:for machineNumber in `seq $maxMachineNumber` do ... done:

\subsection{Finding files recursively in a directory}
\verb:commandName `find . -name \*.xref`:. Can find directories by doing find . -type d.

\part{Distributed computing}
\chapter{Parallel computing paradigms}
Many programs are 'embarassingly parallel' - so easy to parallelize.

There are 3 steps in any parallel algorithm: specification of the problems which must be solved in parallel, executing the problems in parallel, combining the results of these parallel executions.

\chapter{Condor}
This is a common job-scheduler. Once you specify the job in a certain file, condor tries to execute it on some processor (in a cluster) and retrieve the result.

\section{Priority and restarts}
Commonly jobs dispatched by condor are low priority - so if a higher priority process comes in, the condor job is stopped and moved to a different processor. If the program has checkpointing facilites, the job simply continues from where it stopped : Eg: Compiled languages. But if checkpointing is not available, the process restarts when moved to a different node: Eg: most interpreted languages.

\chapter{ORC}
\section{Distinctive features of the language}
\subsection{Purpose of design}
Inspired by functional programming languages.

Distributed computing: There'll be many services on the internet, need a language to orchestrate them. So, good internet mashup language.

Good for concisely reasoning about distrubted systems.

\subsection{Sites}
Everything is a site: a possibly remote function without side-effect which may not respond. Even +, -, if(..) etc.. are sites. These may return sites too. Actual site call is not executed until all arguments are available.

\subsection{Functions}
The language allows/ needs functions, but they're not site calls. It is simply a parametrized expression.

\subsection{Parallelism}
Highly parrellelizable.

Even a+b: a and b are evaluated independently.

\subsection{Speed}

\section{Writing, Building and executing code}
Run in browser, or using an eclipse plugin.

\subsection{Debugging}


\section{Help}
The website.

\section{Pre-compilation processing}

\section{Variable and data types}
\subsection{Data types}
signal is a unary data-type. boolean, numeric etc.. are other data types.

[] is an empty list.

a = Ref() yields a pointer: then do a.read(), a.write().

\subsection{Declaration syntax}
val valName = expression.

This boils down to pruning operator. Eg: $a|valName$ is actually $a|b<b<expression$.

It is scoped to the expression in the next line.

Pattern matching: $a:b=[1, 2, 3]; (\_, a) = (2, 3)$.

\section{Data manipulation}
\subsection{Operators}
/= is 'not equal to' boolean operator.

\subsection{Accessing object methods}
channel.get() actually is shorthand for calling a function which retrieves the get() function and then invokes it.

\section{Code structure}
\subsection{Sentence syntax}
There is actually just one sentence/ expression. Rest is syntactic sugar. Line breaks don't matter.

\subsubsection{Commenting}
\{- asdf -\}

\subsection{Combinators}
Use to stitch together expressions.

Parallel combinator: $a|b$.

Sequential/ push combinator: $>$. Eg: $prompt()>b>c(b)$. Syntactic sugar: $prompt()>b>c$ is same as $prompt()>>c$.

Pruning/ pull operator: $a<b$. Both sides begin to be evaluated simultaneously; if LHS needs a value, then it blocks.

\subsection{Syntax of functions}
Can be nested.

def fnName(arglist) = expression.

Function definition which uses pattern matching, usual syntactic sugar to specify termination condition:

fn([]) = asdfasdf

fn((a:asdf)) = asdfasdf

\subsection{Decision, timing sites}
if(). stop() never returns any value. RTimer().

Iteration accomplished through recursion.

\subsection{Function invocation}
fn(arguments) or fn.

fn(expression): syntactic sugar for $f(x)<x<expression$.

\section{Error handling}

\section{Other library functions}
\subsection{User interaction I/O sites}
prompt(), print().

\part{Serving web-pages}
\chapter{Common Gateway Interface (CGI)}
\section{HTTP server and dynamic content}
A http server serves files; of which html files are normally viewed using web-browsers. These files may be static, or they may be generated dynamically, at the time of the request. For dynamic generation of such files, the http server should coordinate with some external program. At the minimum, it passes the request made by the client to this program and retrieves its output.

These programs may be precompiled - they may be written in C; or they may be written in a scripting language, and the http server may use an appropriate interpreter when the request is made.

\section{Scripting mixed with html}
The dynamic programs often dynamically generate html pages, so the dynamic portions of such pages can potentially be written in another language, while the static portions are written in html. Depending on the language used for the dynamic portion, this mixed-language is called by different names, like perlscript or JSP (or java server pages) or ASP.

The http server may utilize these scripts/ server pages by first converting it into a program of the corresponding language and then using the appropriate interpreter. Eg: JSP's are often first converted to Java servelets.

\chapter{Client side scripting}
Most browsers support javascript.

\chapter{Yahoo pipes}
With this service one can 'rewire the internet': that is, process data available on the web as we like.

\section{Interface}
Programming the processing pipeline is done with a simple graphical interface; where one connects boxes (representing various processing modules) with pipes (representing flow of information).

\section{Looping}
Processing modules may be of the following types: source modules which gather initial data published on the internet in various forms (html, rss feeds etc..),  user input modules, various operator modules for modifications (splitting data, looping, filtering, string replacement, reformatting etc..).

\chapter{Web API}
Some web-services expose API to allow algorithmic access to the information they serve.

\section{Request/ response format}
They specify the serialization formats in which input/ request and output/ response objects (structured data) are to be encoded. This is usually in JSON or XML format.

XML, being more verbose, results in slower computation and transmission.

\section{Underlying Protocol}
Usually, they use http or rpc protocol.

\section{Web interface Protocols}
\subsection{Simple Object access protocol (SOAP)}
It specifies the use of XML for representing objects, certain Message Exchange Patterns (MEP).

\chapter{Particular Web Api's}
\section{Wikimedia}
The mediawiki api is specified \htext{here}{http://en.wikipedia.org/w/api.php}. Also, the \htext{bot-info}{http://en.wikipedia.org/wiki/Wikipedia:Creating_a_bot#Java} page has more information.

\subsection{Java wrappers}
\begin{itemize}
\item \htext{jwpl}{http://code.google.com/p/jwpl/}
  \subitem Not useful in querying live data.
\item JavaWikiBotFramework (\htext{jwbf}{http://jwbf.sourceforge.net/pw/})
  \subitem Seems to have good reviews, poor web documentation.
\item \htext{gwtwiki}{http://code.google.com/p/gwtwiki/} bliki engine.
  \subitem Focuses mainly on converting between wiki text, plain text, google code wikitext and html etc..
  \subitem Has useful \htext{wiki}{http://code.google.com/p/gwtwiki/wiki/MediaWikiAPISupport} (\htext{2}{http://code.google.com/p/gwtwiki/wiki/Mediawiki2HTML}) page with examples.
\item \htext{java wiki api}{http://jwikiapi.sourceforge.net/}
  \subitem Has some examples.
\end{itemize}

Wiktionary frameworks:
\begin{itemize}
\item \htext{jwktl}{http://www.ukp.tu-darmstadt.de/software/jwktl/}
  \subitem Not useful in querying live data.
\end{itemize}


\part{Programming within browsers}
\chapter{Html and CSS}
\tbc


\section{CSS}
\tbc

\chapter{ECMA script/ javascript}
\section{Distinctive features}
prototype-based object oriented. Functional  (has first class functions, closures). Variable type is loosely set, and can dynamically change. C-like syntax.

\subsection{Design flaws}
Some design flaws lead to very confusing semantics, which makes bugs common both in writing and altering code.

``JavaScript has its share of design errors, such as the overloading of + to mean both addition and concatenation with type coercion, and the error-prone with statement should be avoided. The reserved word policies are much too strict.'' 

Other problems: It takes varName = value; to mean a declaration of a global variable if varName had not been declared previously. DOM, which is heavily used by the language, is also flawed.

This, along with books promoting bad programming practices, use by amateur programmers, has led to it acquiring some bad reputation.

\subsection{Programming discipline}
JS's design flaws may be mitigated by adapting greater programming discipline. There are two steps: 1] Ensure syntactic correctness using jslint, 2] Ensure semantic correctness using proofs and testing as usual.

\subsubsection{Development tools}
Use built-in debuggers or extensions like firebug.

Use \htext{jslint}{http://www.jslint.com/lint.html} to ensure syntactic quality in the code: jslint devel: true, browser: true, undef: false, vars: true, white: true, maxerr: 50, indent: 4 


IDE: Bluefish.

\subsection{Implementation variations}
JavaScript and DOM implementations vary across browsers - even from the standards. So, scripts must be tested on different target browsers.

\subsection{Acknowledgement}
Much of the below is copied verbatim from the internet.

\subsection{Security}
``First, scripts run in a sandbox in which they can only perform web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the same origin policy: scripts from one web site do not have access to information such as usernames, passwords, or cookies sent to another site.''

Security bugs are breaches of either the same origin policy (in cross-site scripting, or XSS) or the sandbox.

\section{Variables and data types}
\subsection{Declaration}
var varName [= value];

\subsection{Basic types and values}
There are three primitive types boolean, number, and string and the special values null and undefined. Everything else is variations on the object type.

\subsubsection{Number}
Number is 64-bit floating point, similar to Java's double and Double. There is no integer type.

\subsection{String}
String is a sequence of zero or more Unicode characters. There is no separate character type. String literals are enclosed in \verb|"" and ''|.

Strings have a length member.

\subsubsection{Regular expressions}
One can pass regexp objects to the following: str.replace(), split, search, test.

\subsection{Adding methods}
Some basic methods may be 'added', which is equivalent to saying that special methods are predefined and accessible by what may be special syntax. Eg: Math.PI.int() produces 3.

\subsection{Objects}
Objects are hashtables.

\subsubsection{Object literals, creation}
\verb|{keyValueList}|, where keyValueList is comma separated, and has elements of the form keyString: value. When reserved words are used for keys, they must be enclosed in quotes, otherwise this is not necessary.

Also, Object() creates an empty object.

\subsubsection{Accessing/ updating members}
\verb|obj["key"], obj.key|.

Values may be updated using:  \verb|obj["key"] = val;| obj.key = val;.

\subsubsection{Enumeration}
Done using for (var n in obj) if (obj.hasOwnProperty(n)) statementBlock

\subsection{Array}
These are actually special objects, with the additional length property which is always 1 larger than the largest integer key in the array.

\subsubsection{Literals, creation}
[valueList]. new Array(); yields an empty array.

\subsection{Regular expressions}
More at \htext{http://www.javascriptkit.com/jsref/regexp.shtml}{javascriptkit}.

Methods for using these objects with string literals are described elsewhere.

\subsubsection{Literals}
\verb /exp/ : a patternFlag may be appended at the end. new RegExp(expString, patternFlag ).

patternFlag can be i (ignore case), m (multiline: alter meaning of \verb ^,$ ), g (global), gi.

\subsection{Function}
A function is a special type of object.

\subsubsection{Definition}
function fnName(argNamesList) statementBlock.

The above is shortcut for var fnName = function fnName(argumentlist) block ;

argNamesList is optional. A function can accept any number of arguments, which can be accessed through the arguments array.

There is the Function() constructor, whose use is to be avoided.

\subsection{Operators}
These are functions with special invocation syntax. Arithmetic and comparison seen in C are available, with some differences.

The + operator is used for both addition and concatenation. + can be used as a prefix operator, converting its string operand to a number.

!! can be used as a prefix operator, converting its operand to a boolean.

The \&\& operator, which can also be called the guard, returns the second argument if the first operand is anything other than false, null, undefined, "" or 0. So, one can write var value = p \&\& p.name; as a way to do a 'null check'.

Similarly, || operator can also be called the default, enabling specification of a default value: value = v || 10;.

Bitwise and shift operators implicitly convert a floating point number to a 32 bit integer for the operation.

The == and != operators do type coercion before comparing. Use the more reliable === and !== operators instead.

typeof returns a lower case string based on the type of its operand.


\section{Code structure}
\subsection{Syntax}
Syntax for comments is as in C. All statements end with ; - which when missing is automatically implicitly inserted before execution. Code-blocks are as in C; but variable scoping is different.

\subsection{Decision structures}
if-else, switch-case constructs are as in C.

\subsubsection{Looping}
for, while, do-while loops are as in C. In addition, there is the for enumerator for objects described elsewhere.

\section{IO}
\subsection{HTTP requests}
var xmlHttp = new XMLHttpRequest(); 

xmlHttp.onreadystatechange = processResponse;

xmlHttp.open( "GET", Url, true );
xmlHttp.send( null );

The processResponse function should then check the xmlHttp.readyState and xmlHttp.status and respond accordingly.

\subsection{Logging}
console.log, alert.

\subsection{Outputting parts of html text}
document.writeln().

\subsection{Document object model (DOM)}
\subsubsection{Structure}
The document is viewed as a tree of objects/ node objects. Node objects, depending on their state (esp nodeType) and behavior can be : document nodes, text, attribute, element and other types of nodes.

At the root is the document node. The element nodes may correspond to either text nods or the various tags which appear in the html/ xml document.

See \htext{javascriptkit}{http://www.javascriptkit.com/domref/elementmethods.shtml} for a good list.

\subsubsection{Document object}
createElement(tagName) creates an element which may then be appended in the DOM tree.

\subsubsection{Element object}
For traversal: getElementsByTagName('a'), getElementsById, childNodes[], nextSibling. 

Accessing and altering attributes and text: attributes[], getAttribute, setAttribute, innerHTML. 

Modifiers: appendChild.

\section{UI}
\subsection{Events}
Mouse events include mousedown, mouseup, mouseout, mousemove. These include pageX, pageY properties.

\subsection{Event listeners}
Event listeners may be added or removed to various node objects using addEventListener(eventTypeStr, listener, bCapture) and removeEventListener().

\subsection{Getting selected text}
Use document.getSelection().

\section{Threads, timing}
Threads are only now being added (2010).

\subsection{Executing code after some time}
timerId = setTimeout(functionHandle, milliseconds). This can be canceled with clearTimeout(timerId).

\subsection{Periodic execution of code}
setInterval(): syntax is similar to setTimeout. To cancel it, use clearInterval().

\chapter{User scripts}
\section{Motivation}
Modern browsers, perhaps aided by extensions like greasemonkey, allow users to write scripts which are activated for certain websites. The language is essentially javascript.

Many scripts can be found in userscripts.org.

\section{Header format}
\begin{verbatim}
// ==UserScript==
// @name           sanskrit vocabulary trainer
// @description    sanskrit vocabulary trainer
// @author         vishvAs vAsuki Iyengar
// @include        http://*vasuki*
// @version        1.0
// ==/UserScript==
\end{verbatim}



\part{Databases}
\chapter{Relational Database management system (RDBMS)}
All records can be viewed as consisting of some fields or attributes.  Every attribute has a fixed domain. There are relations among these fields which impose constraints on what forms a valid record.

Tuples are a collection of values assigned to attributes. A bunch of tuples sharing the same attributes form a relation (or a table).

\section{Relational algebra}
Relations can undergo the following operations: Union, intersection, difference, cross product, selection/ restriction, projection, inner join, relational division (?).

\section{Database normalization}
What relations should exist and what attributes should various relations contain so that they do not redundantly store data?

To do this there are various normal forms (Boyce Codd). However, normalizing a database too much causes retrieval and update operations to slow down as they will involve joins.

\chapter{Structured query language (SQL)}
A standard language for dealing with RDBMS. So, data can be visualized as being stored in tables.

\section{Help and tutorials}
w3schools has a good tutorial.

\section{Values}
Strings are enclosed as here: 'asdf'.

\section{Data definition language (DDL)}
\subsection{Constraints}
Constraints ensure that updates to the database are consistent with some predefined rules. They maintain entity integrity (with domain constraints etc..) and referential integrity (with foreign key constraints).

Primary key constraint for a field in a table: Every record in the table has a unique value for a given field. Secondary key constraint: Keys which are also indexed, and can be used as unique identifiers for tuples.

Foreign key constraint on a field in a table: says that the value assigned to the attribute must correspond to a (usually primary key ) attribute of another tuple.

Check constraints: Enforces business rules.

\subsection{Commands}
create database

alter database

create table

drop table

alter table

Indexing records by a particular field is useful for efficient search and retrieval.

create index

drop index

Extensions often include commands for backing up, restoring and storing databases.

\section{Data modification language (DML)}
\subsection{Condition clause}
Condition may be: strField = 'string'. Besides common arithmetic comparison operators \verb'(= ~= or <>, > < >= ..)', IN (set membership), BETWEEN and LIKE (for searching patterns) are also used.

Connectors like AND and OR are also used.

\subsection{Commands}
select (distinct) fields from table where condition [order by colname = 'ASC' ..].
fields can be * or field1, field2 ..

update table set (field1=value1, ..) where condition.

delete from table where condition.

insert into table(fields) values valueList.


\section{Stored procedures}
A piece of sql code which can be easily called.

\chapter{Flat file DB}
The entire database may be stored within a single file. Such databases may be useful when a database server is not required and when access is local. Eg: sqlite, berkeley db (not a relational db), recutils.


\part{Document typesetting}
\chapter{latex}
\section{templates}
reports, articles.

\section{Drawing figures}
pstricks. tikz: good for drawing graphs with nodes and edges, but not as advanced as pstricks.

\section{Space management}
\verb'\vspace{-3ex}' sets the vertical spacing to a third the size of 'x'. This should ideally be used towards the end of the document.

\chapter{html}



% \bibliographystyle{plain}
% \bibliography{programmingLanguages}
\end{document}
